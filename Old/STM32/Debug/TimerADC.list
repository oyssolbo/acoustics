
TimerADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c18  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004e10  08004e10  00014e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e38  08004e38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00030324  2000000c  08004e4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20030330  08004e4c  00020330  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dec2  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001dc3  00000000  00000000  0002defc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  0002fcc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d10  00000000  00000000  00030ac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026b31  00000000  00000000  000317d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a58e  00000000  00000000  00058309  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f62d4  00000000  00000000  00062897  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00158b6b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ad8  00000000  00000000  00158be8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08004df8 	.word	0x08004df8

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08004df8 	.word	0x08004df8

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000248:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800053c:	2003      	movs	r0, #3
 800053e:	f000 fd15 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000542:	2000      	movs	r0, #0
 8000544:	f000 f806 	bl	8000554 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000548:	f004 f99a 	bl	8004880 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	bd80      	pop	{r7, pc}
	...

08000554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800055c:	4b12      	ldr	r3, [pc, #72]	; (80005a8 <HAL_InitTick+0x54>)
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	4b12      	ldr	r3, [pc, #72]	; (80005ac <HAL_InitTick+0x58>)
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	4619      	mov	r1, r3
 8000566:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800056a:	fbb3 f3f1 	udiv	r3, r3, r1
 800056e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000572:	4618      	mov	r0, r3
 8000574:	f000 fd2f 	bl	8000fd6 <HAL_SYSTICK_Config>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800057e:	2301      	movs	r3, #1
 8000580:	e00e      	b.n	80005a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2b0f      	cmp	r3, #15
 8000586:	d80a      	bhi.n	800059e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000588:	2200      	movs	r2, #0
 800058a:	6879      	ldr	r1, [r7, #4]
 800058c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000590:	f000 fcf7 	bl	8000f82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000594:	4a06      	ldr	r2, [pc, #24]	; (80005b0 <HAL_InitTick+0x5c>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800059a:	2300      	movs	r3, #0
 800059c:	e000      	b.n	80005a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800059e:	2301      	movs	r3, #1
}
 80005a0:	4618      	mov	r0, r3
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	20000008 	.word	0x20000008
 80005ac:	20000004 	.word	0x20000004
 80005b0:	20000000 	.word	0x20000000

080005b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005b8:	4b06      	ldr	r3, [pc, #24]	; (80005d4 <HAL_IncTick+0x20>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	461a      	mov	r2, r3
 80005be:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <HAL_IncTick+0x24>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	4413      	add	r3, r2
 80005c4:	4a04      	ldr	r2, [pc, #16]	; (80005d8 <HAL_IncTick+0x24>)
 80005c6:	6013      	str	r3, [r2, #0]
}
 80005c8:	bf00      	nop
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000004 	.word	0x20000004
 80005d8:	20000030 	.word	0x20000030

080005dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  return uwTick;
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <HAL_GetTick+0x14>)
 80005e2:	681b      	ldr	r3, [r3, #0]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop
 80005f0:	20000030 	.word	0x20000030

080005f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d101      	bne.n	800060a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000606:	2301      	movs	r3, #1
 8000608:	e031      	b.n	800066e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800060e:	2b00      	cmp	r3, #0
 8000610:	d109      	bne.n	8000626 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f004 f958 	bl	80048c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2200      	movs	r2, #0
 800061c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2200      	movs	r2, #0
 8000622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800062a:	f003 0310 	and.w	r3, r3, #16
 800062e:	2b00      	cmp	r3, #0
 8000630:	d116      	bne.n	8000660 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <HAL_ADC_Init+0x84>)
 8000638:	4013      	ands	r3, r2
 800063a:	f043 0202 	orr.w	r2, r3, #2
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000642:	6878      	ldr	r0, [r7, #4]
 8000644:	f000 fa46 	bl	8000ad4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0201 	orr.w	r2, r3, #1
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	641a      	str	r2, [r3, #64]	; 0x40
 800065e:	e001      	b.n	8000664 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000660:	2301      	movs	r3, #1
 8000662:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	2200      	movs	r2, #0
 8000668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800066c:	7bfb      	ldrb	r3, [r7, #15]
}
 800066e:	4618      	mov	r0, r3
 8000670:	3710      	adds	r7, #16
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	ffffeefd 	.word	0xffffeefd

0800067c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b086      	sub	sp, #24
 8000680:	af00      	add	r7, sp, #0
 8000682:	60f8      	str	r0, [r7, #12]
 8000684:	60b9      	str	r1, [r7, #8]
 8000686:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000692:	2b01      	cmp	r3, #1
 8000694:	d101      	bne.n	800069a <HAL_ADC_Start_DMA+0x1e>
 8000696:	2302      	movs	r3, #2
 8000698:	e0c7      	b.n	800082a <HAL_ADC_Start_DMA+0x1ae>
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	2201      	movs	r2, #1
 800069e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 0301 	and.w	r3, r3, #1
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d018      	beq.n	80006e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689a      	ldr	r2, [r3, #8]
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f042 0201 	orr.w	r2, r2, #1
 80006be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80006c0:	4b5c      	ldr	r3, [pc, #368]	; (8000834 <HAL_ADC_Start_DMA+0x1b8>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a5c      	ldr	r2, [pc, #368]	; (8000838 <HAL_ADC_Start_DMA+0x1bc>)
 80006c6:	fba2 2303 	umull	r2, r3, r2, r3
 80006ca:	0c9a      	lsrs	r2, r3, #18
 80006cc:	4613      	mov	r3, r2
 80006ce:	005b      	lsls	r3, r3, #1
 80006d0:	4413      	add	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80006d4:	e002      	b.n	80006dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80006d6:	697b      	ldr	r3, [r7, #20]
 80006d8:	3b01      	subs	r3, #1
 80006da:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80006dc:	697b      	ldr	r3, [r7, #20]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d1f9      	bne.n	80006d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	689b      	ldr	r3, [r3, #8]
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	2b01      	cmp	r3, #1
 80006ee:	f040 809b 	bne.w	8000828 <HAL_ADC_Start_DMA+0x1ac>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80006f6:	4b51      	ldr	r3, [pc, #324]	; (800083c <HAL_ADC_Start_DMA+0x1c0>)
 80006f8:	4013      	ands	r3, r2
 80006fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	685b      	ldr	r3, [r3, #4]
 8000708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800070c:	2b00      	cmp	r3, #0
 800070e:	d007      	beq.n	8000720 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000718:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000720:	68fb      	ldr	r3, [r7, #12]
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000728:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800072c:	d106      	bne.n	800073c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f023 0206 	bic.w	r2, r3, #6
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	645a      	str	r2, [r3, #68]	; 0x44
 800073a:	e002      	b.n	8000742 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	2200      	movs	r2, #0
 8000740:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	2200      	movs	r2, #0
 8000746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800074e:	4a3c      	ldr	r2, [pc, #240]	; (8000840 <HAL_ADC_Start_DMA+0x1c4>)
 8000750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000756:	4a3b      	ldr	r2, [pc, #236]	; (8000844 <HAL_ADC_Start_DMA+0x1c8>)
 8000758:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800075e:	4a3a      	ldr	r2, [pc, #232]	; (8000848 <HAL_ADC_Start_DMA+0x1cc>)
 8000760:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000762:	68fb      	ldr	r3, [r7, #12]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800076a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	685a      	ldr	r2, [r3, #4]
 8000772:	68fb      	ldr	r3, [r7, #12]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800077a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	689a      	ldr	r2, [r3, #8]
 8000782:	68fb      	ldr	r3, [r7, #12]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800078a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800078c:	68fb      	ldr	r3, [r7, #12]
 800078e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	334c      	adds	r3, #76	; 0x4c
 8000796:	4619      	mov	r1, r3
 8000798:	68ba      	ldr	r2, [r7, #8]
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	f000 fcd6 	bl	800114c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80007a0:	4b2a      	ldr	r3, [pc, #168]	; (800084c <HAL_ADC_Start_DMA+0x1d0>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f003 031f 	and.w	r3, r3, #31
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d10f      	bne.n	80007cc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	689b      	ldr	r3, [r3, #8]
 80007b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d136      	bne.n	8000828 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	689a      	ldr	r2, [r3, #8]
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007c8:	609a      	str	r2, [r3, #8]
 80007ca:	e02d      	b.n	8000828 <HAL_ADC_Start_DMA+0x1ac>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	4a1f      	ldr	r2, [pc, #124]	; (8000850 <HAL_ADC_Start_DMA+0x1d4>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d10e      	bne.n	80007f4 <HAL_ADC_Start_DMA+0x178>
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	689b      	ldr	r3, [r3, #8]
 80007dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d107      	bne.n	80007f4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	689a      	ldr	r2, [r3, #8]
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80007f2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80007f4:	4b15      	ldr	r3, [pc, #84]	; (800084c <HAL_ADC_Start_DMA+0x1d0>)
 80007f6:	685b      	ldr	r3, [r3, #4]
 80007f8:	f003 0310 	and.w	r3, r3, #16
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d113      	bne.n	8000828 <HAL_ADC_Start_DMA+0x1ac>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a13      	ldr	r2, [pc, #76]	; (8000854 <HAL_ADC_Start_DMA+0x1d8>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d10e      	bne.n	8000828 <HAL_ADC_Start_DMA+0x1ac>
 800080a:	68fb      	ldr	r3, [r7, #12]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	689b      	ldr	r3, [r3, #8]
 8000810:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000814:	2b00      	cmp	r3, #0
 8000816:	d107      	bne.n	8000828 <HAL_ADC_Start_DMA+0x1ac>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	689a      	ldr	r2, [r3, #8]
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000826:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000008 	.word	0x20000008
 8000838:	431bde83 	.word	0x431bde83
 800083c:	fffff8fe 	.word	0xfffff8fe
 8000840:	08000cc9 	.word	0x08000cc9
 8000844:	08000d83 	.word	0x08000d83
 8000848:	08000d9f 	.word	0x08000d9f
 800084c:	40012300 	.word	0x40012300
 8000850:	40012000 	.word	0x40012000
 8000854:	40012200 	.word	0x40012200

08000858 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000860:	bf00      	nop
 8000862:	370c      	adds	r7, #12
 8000864:	46bd      	mov	sp, r7
 8000866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086a:	4770      	bx	lr

0800086c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000880:	2b01      	cmp	r3, #1
 8000882:	d101      	bne.n	8000888 <HAL_ADC_ConfigChannel+0x1c>
 8000884:	2302      	movs	r3, #2
 8000886:	e115      	b.n	8000ab4 <HAL_ADC_ConfigChannel+0x248>
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	2201      	movs	r2, #1
 800088c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	2b09      	cmp	r3, #9
 8000896:	d935      	bls.n	8000904 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	68d9      	ldr	r1, [r3, #12]
 800089e:	683b      	ldr	r3, [r7, #0]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	b29b      	uxth	r3, r3
 80008a4:	461a      	mov	r2, r3
 80008a6:	4613      	mov	r3, r2
 80008a8:	005b      	lsls	r3, r3, #1
 80008aa:	4413      	add	r3, r2
 80008ac:	3b1e      	subs	r3, #30
 80008ae:	2207      	movs	r2, #7
 80008b0:	fa02 f303 	lsl.w	r3, r2, r3
 80008b4:	43da      	mvns	r2, r3
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	400a      	ands	r2, r1
 80008bc:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	4a7f      	ldr	r2, [pc, #508]	; (8000ac0 <HAL_ADC_ConfigChannel+0x254>)
 80008c4:	4293      	cmp	r3, r2
 80008c6:	d10a      	bne.n	80008de <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68d9      	ldr	r1, [r3, #12]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	061a      	lsls	r2, r3, #24
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	430a      	orrs	r2, r1
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	e035      	b.n	800094a <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	68d9      	ldr	r1, [r3, #12]
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	689a      	ldr	r2, [r3, #8]
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	b29b      	uxth	r3, r3
 80008ee:	4618      	mov	r0, r3
 80008f0:	4603      	mov	r3, r0
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4403      	add	r3, r0
 80008f6:	3b1e      	subs	r3, #30
 80008f8:	409a      	lsls	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	430a      	orrs	r2, r1
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	e022      	b.n	800094a <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	6919      	ldr	r1, [r3, #16]
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	b29b      	uxth	r3, r3
 8000910:	461a      	mov	r2, r3
 8000912:	4613      	mov	r3, r2
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	4413      	add	r3, r2
 8000918:	2207      	movs	r2, #7
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	43da      	mvns	r2, r3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	400a      	ands	r2, r1
 8000926:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	6919      	ldr	r1, [r3, #16]
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	689a      	ldr	r2, [r3, #8]
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	b29b      	uxth	r3, r3
 8000938:	4618      	mov	r0, r3
 800093a:	4603      	mov	r3, r0
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4403      	add	r3, r0
 8000940:	409a      	lsls	r2, r3
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	430a      	orrs	r2, r1
 8000948:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	685b      	ldr	r3, [r3, #4]
 800094e:	2b06      	cmp	r3, #6
 8000950:	d824      	bhi.n	800099c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	4613      	mov	r3, r2
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	4413      	add	r3, r2
 8000962:	3b05      	subs	r3, #5
 8000964:	221f      	movs	r2, #31
 8000966:	fa02 f303 	lsl.w	r3, r2, r3
 800096a:	43da      	mvns	r2, r3
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	400a      	ands	r2, r1
 8000972:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	b29b      	uxth	r3, r3
 8000980:	4618      	mov	r0, r3
 8000982:	683b      	ldr	r3, [r7, #0]
 8000984:	685a      	ldr	r2, [r3, #4]
 8000986:	4613      	mov	r3, r2
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	4413      	add	r3, r2
 800098c:	3b05      	subs	r3, #5
 800098e:	fa00 f203 	lsl.w	r2, r0, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	430a      	orrs	r2, r1
 8000998:	635a      	str	r2, [r3, #52]	; 0x34
 800099a:	e04c      	b.n	8000a36 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800099c:	683b      	ldr	r3, [r7, #0]
 800099e:	685b      	ldr	r3, [r3, #4]
 80009a0:	2b0c      	cmp	r3, #12
 80009a2:	d824      	bhi.n	80009ee <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685a      	ldr	r2, [r3, #4]
 80009ae:	4613      	mov	r3, r2
 80009b0:	009b      	lsls	r3, r3, #2
 80009b2:	4413      	add	r3, r2
 80009b4:	3b23      	subs	r3, #35	; 0x23
 80009b6:	221f      	movs	r2, #31
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43da      	mvns	r2, r3
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	400a      	ands	r2, r1
 80009c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	b29b      	uxth	r3, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	4613      	mov	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	4413      	add	r3, r2
 80009de:	3b23      	subs	r3, #35	; 0x23
 80009e0:	fa00 f203 	lsl.w	r2, r0, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	430a      	orrs	r2, r1
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30
 80009ec:	e023      	b.n	8000a36 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80009f4:	683b      	ldr	r3, [r7, #0]
 80009f6:	685a      	ldr	r2, [r3, #4]
 80009f8:	4613      	mov	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	4413      	add	r3, r2
 80009fe:	3b41      	subs	r3, #65	; 0x41
 8000a00:	221f      	movs	r2, #31
 8000a02:	fa02 f303 	lsl.w	r3, r2, r3
 8000a06:	43da      	mvns	r2, r3
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	400a      	ands	r2, r1
 8000a0e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000a16:	683b      	ldr	r3, [r7, #0]
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	b29b      	uxth	r3, r3
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	685a      	ldr	r2, [r3, #4]
 8000a22:	4613      	mov	r3, r2
 8000a24:	009b      	lsls	r3, r3, #2
 8000a26:	4413      	add	r3, r2
 8000a28:	3b41      	subs	r3, #65	; 0x41
 8000a2a:	fa00 f203 	lsl.w	r2, r0, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	430a      	orrs	r2, r1
 8000a34:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a22      	ldr	r2, [pc, #136]	; (8000ac4 <HAL_ADC_ConfigChannel+0x258>)
 8000a3c:	4293      	cmp	r3, r2
 8000a3e:	d109      	bne.n	8000a54 <HAL_ADC_ConfigChannel+0x1e8>
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	2b12      	cmp	r3, #18
 8000a46:	d105      	bne.n	8000a54 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000a48:	4b1f      	ldr	r3, [pc, #124]	; (8000ac8 <HAL_ADC_ConfigChannel+0x25c>)
 8000a4a:	685b      	ldr	r3, [r3, #4]
 8000a4c:	4a1e      	ldr	r2, [pc, #120]	; (8000ac8 <HAL_ADC_ConfigChannel+0x25c>)
 8000a4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a52:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a1a      	ldr	r2, [pc, #104]	; (8000ac4 <HAL_ADC_ConfigChannel+0x258>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d125      	bne.n	8000aaa <HAL_ADC_ConfigChannel+0x23e>
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4a17      	ldr	r2, [pc, #92]	; (8000ac0 <HAL_ADC_ConfigChannel+0x254>)
 8000a64:	4293      	cmp	r3, r2
 8000a66:	d003      	beq.n	8000a70 <HAL_ADC_ConfigChannel+0x204>
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b11      	cmp	r3, #17
 8000a6e:	d11c      	bne.n	8000aaa <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000a70:	4b15      	ldr	r3, [pc, #84]	; (8000ac8 <HAL_ADC_ConfigChannel+0x25c>)
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <HAL_ADC_ConfigChannel+0x25c>)
 8000a76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000a7a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a0f      	ldr	r2, [pc, #60]	; (8000ac0 <HAL_ADC_ConfigChannel+0x254>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d111      	bne.n	8000aaa <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000a86:	4b11      	ldr	r3, [pc, #68]	; (8000acc <HAL_ADC_ConfigChannel+0x260>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4a11      	ldr	r2, [pc, #68]	; (8000ad0 <HAL_ADC_ConfigChannel+0x264>)
 8000a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a90:	0c9a      	lsrs	r2, r3, #18
 8000a92:	4613      	mov	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000a9c:	e002      	b.n	8000aa4 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d1f9      	bne.n	8000a9e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2200      	movs	r2, #0
 8000aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000ab2:	2300      	movs	r3, #0
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	3714      	adds	r7, #20
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	10000012 	.word	0x10000012
 8000ac4:	40012000 	.word	0x40012000
 8000ac8:	40012300 	.word	0x40012300
 8000acc:	20000008 	.word	0x20000008
 8000ad0:	431bde83 	.word	0x431bde83

08000ad4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	b083      	sub	sp, #12
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000adc:	4b78      	ldr	r3, [pc, #480]	; (8000cc0 <ADC_Init+0x1ec>)
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	4a77      	ldr	r2, [pc, #476]	; (8000cc0 <ADC_Init+0x1ec>)
 8000ae2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000ae6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000ae8:	4b75      	ldr	r3, [pc, #468]	; (8000cc0 <ADC_Init+0x1ec>)
 8000aea:	685a      	ldr	r2, [r3, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	4973      	ldr	r1, [pc, #460]	; (8000cc0 <ADC_Init+0x1ec>)
 8000af2:	4313      	orrs	r3, r2
 8000af4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	685a      	ldr	r2, [r3, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	6859      	ldr	r1, [r3, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	691b      	ldr	r3, [r3, #16]
 8000b10:	021a      	lsls	r2, r3, #8
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	430a      	orrs	r2, r1
 8000b18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	685a      	ldr	r2, [r3, #4]
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	6859      	ldr	r1, [r3, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	689a      	ldr	r2, [r3, #8]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	430a      	orrs	r2, r1
 8000b3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	689a      	ldr	r2, [r3, #8]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6899      	ldr	r1, [r3, #8]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68da      	ldr	r2, [r3, #12]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	430a      	orrs	r2, r1
 8000b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b62:	4a58      	ldr	r2, [pc, #352]	; (8000cc4 <ADC_Init+0x1f0>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d022      	beq.n	8000bae <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	689a      	ldr	r2, [r3, #8]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	6899      	ldr	r1, [r3, #8]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	430a      	orrs	r2, r1
 8000b88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	689a      	ldr	r2, [r3, #8]
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	6899      	ldr	r1, [r3, #8]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	430a      	orrs	r2, r1
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	e00f      	b.n	8000bce <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	689a      	ldr	r2, [r3, #8]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689a      	ldr	r2, [r3, #8]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000bcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	689a      	ldr	r2, [r3, #8]
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f022 0202 	bic.w	r2, r2, #2
 8000bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	6899      	ldr	r1, [r3, #8]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	005a      	lsls	r2, r3, #1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	430a      	orrs	r2, r1
 8000bf0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d01b      	beq.n	8000c34 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685a      	ldr	r2, [r3, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	6859      	ldr	r1, [r3, #4]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c26:	3b01      	subs	r3, #1
 8000c28:	035a      	lsls	r2, r3, #13
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	605a      	str	r2, [r3, #4]
 8000c32:	e007      	b.n	8000c44 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	69db      	ldr	r3, [r3, #28]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	051a      	lsls	r2, r3, #20
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	430a      	orrs	r2, r1
 8000c68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8000c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	6899      	ldr	r1, [r3, #8]
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000c86:	025a      	lsls	r2, r3, #9
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	689a      	ldr	r2, [r3, #8]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	6899      	ldr	r1, [r3, #8]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	029a      	lsls	r2, r3, #10
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	430a      	orrs	r2, r1
 8000cb2:	609a      	str	r2, [r3, #8]
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	40012300 	.word	0x40012300
 8000cc4:	0f000001 	.word	0x0f000001

08000cc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cd4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d13c      	bne.n	8000d5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	689b      	ldr	r3, [r3, #8]
 8000cf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d12b      	bne.n	8000d54 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d127      	bne.n	8000d54 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d006      	beq.n	8000d20 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d119      	bne.n	8000d54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	685a      	ldr	r2, [r3, #4]
 8000d26:	68fb      	ldr	r3, [r7, #12]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f022 0220 	bic.w	r2, r2, #32
 8000d2e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4c:	f043 0201 	orr.w	r2, r3, #1
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8000d54:	68f8      	ldr	r0, [r7, #12]
 8000d56:	f003 fd7b 	bl	8004850 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8000d5a:	e00e      	b.n	8000d7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d60:	f003 0310 	and.w	r3, r3, #16
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d003      	beq.n	8000d70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8000d68:	68f8      	ldr	r0, [r7, #12]
 8000d6a:	f7ff fd75 	bl	8000858 <HAL_ADC_ErrorCallback>
}
 8000d6e:	e004      	b.n	8000d7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d76:	6878      	ldr	r0, [r7, #4]
 8000d78:	4798      	blx	r3
}
 8000d7a:	bf00      	nop
 8000d7c:	3710      	adds	r7, #16
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b084      	sub	sp, #16
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8000d90:	68f8      	ldr	r0, [r7, #12]
 8000d92:	f003 fd4d 	bl	8004830 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000d96:	bf00      	nop
 8000d98:	3710      	adds	r7, #16
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8000d9e:	b580      	push	{r7, lr}
 8000da0:	b084      	sub	sp, #16
 8000da2:	af00      	add	r7, sp, #0
 8000da4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000daa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	2240      	movs	r2, #64	; 0x40
 8000db0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	f043 0204 	orr.w	r2, r3, #4
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8000dbe:	68f8      	ldr	r0, [r7, #12]
 8000dc0:	f7ff fd4a 	bl	8000858 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <__NVIC_SetPriorityGrouping+0x40>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x40>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	05fa0000 	.word	0x05fa0000

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
	...

08000f28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3b01      	subs	r3, #1
 8000f34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f38:	d301      	bcc.n	8000f3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e00f      	b.n	8000f5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f3e:	4a0a      	ldr	r2, [pc, #40]	; (8000f68 <SysTick_Config+0x40>)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f46:	210f      	movs	r1, #15
 8000f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f4c:	f7ff ff8e 	bl	8000e6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <SysTick_Config+0x40>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f56:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <SysTick_Config+0x40>)
 8000f58:	2207      	movs	r2, #7
 8000f5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	e000e010 	.word	0xe000e010

08000f6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff29 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}

08000f82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f82:	b580      	push	{r7, lr}
 8000f84:	b086      	sub	sp, #24
 8000f86:	af00      	add	r7, sp, #0
 8000f88:	4603      	mov	r3, r0
 8000f8a:	60b9      	str	r1, [r7, #8]
 8000f8c:	607a      	str	r2, [r7, #4]
 8000f8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f94:	f7ff ff3e 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	6978      	ldr	r0, [r7, #20]
 8000fa0:	f7ff ff8e 	bl	8000ec0 <NVIC_EncodePriority>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000faa:	4611      	mov	r1, r2
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff ff5d 	bl	8000e6c <__NVIC_SetPriority>
}
 8000fb2:	bf00      	nop
 8000fb4:	3718      	adds	r7, #24
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b082      	sub	sp, #8
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff ff31 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fd6:	b580      	push	{r7, lr}
 8000fd8:	b082      	sub	sp, #8
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fde:	6878      	ldr	r0, [r7, #4]
 8000fe0:	f7ff ffa2 	bl	8000f28 <SysTick_Config>
 8000fe4:	4603      	mov	r3, r0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000ffc:	f7ff faee 	bl	80005dc <HAL_GetTick>
 8001000:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e099      	b.n	8001140 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2200      	movs	r2, #0
 8001010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2202      	movs	r2, #2
 8001018:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f022 0201 	bic.w	r2, r2, #1
 800102a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800102c:	e00f      	b.n	800104e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800102e:	f7ff fad5 	bl	80005dc <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b05      	cmp	r3, #5
 800103a:	d908      	bls.n	800104e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2220      	movs	r2, #32
 8001040:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2203      	movs	r2, #3
 8001046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e078      	b.n	8001140 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	2b00      	cmp	r3, #0
 800105a:	d1e8      	bne.n	800102e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	4b38      	ldr	r3, [pc, #224]	; (8001148 <HAL_DMA_Init+0x158>)
 8001068:	4013      	ands	r3, r2
 800106a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685a      	ldr	r2, [r3, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800107a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	691b      	ldr	r3, [r3, #16]
 8001080:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001086:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001092:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	6a1b      	ldr	r3, [r3, #32]
 8001098:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	4313      	orrs	r3, r2
 800109e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a4:	2b04      	cmp	r3, #4
 80010a6:	d107      	bne.n	80010b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b0:	4313      	orrs	r3, r2
 80010b2:	697a      	ldr	r2, [r7, #20]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	695b      	ldr	r3, [r3, #20]
 80010c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	f023 0307 	bic.w	r3, r3, #7
 80010ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	4313      	orrs	r3, r2
 80010d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010de:	2b04      	cmp	r3, #4
 80010e0:	d117      	bne.n	8001112 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e6:	697a      	ldr	r2, [r7, #20]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d00e      	beq.n	8001112 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f000 fa77 	bl	80015e8 <DMA_CheckFifoParam>
 80010fa:	4603      	mov	r3, r0
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d008      	beq.n	8001112 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2201      	movs	r2, #1
 800110a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800110e:	2301      	movs	r3, #1
 8001110:	e016      	b.n	8001140 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	697a      	ldr	r2, [r7, #20]
 8001118:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 fa2e 	bl	800157c <DMA_CalcBaseAndBitshift>
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001128:	223f      	movs	r2, #63	; 0x3f
 800112a:	409a      	lsls	r2, r3
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2201      	movs	r2, #1
 800113a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800113e:	2300      	movs	r3, #0
}
 8001140:	4618      	mov	r0, r3
 8001142:	3718      	adds	r7, #24
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	e010803f 	.word	0xe010803f

0800114c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af00      	add	r7, sp, #0
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800115a:	2300      	movs	r3, #0
 800115c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001162:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800116a:	2b01      	cmp	r3, #1
 800116c:	d101      	bne.n	8001172 <HAL_DMA_Start_IT+0x26>
 800116e:	2302      	movs	r3, #2
 8001170:	e048      	b.n	8001204 <HAL_DMA_Start_IT+0xb8>
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	2201      	movs	r2, #1
 8001176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b01      	cmp	r3, #1
 8001184:	d137      	bne.n	80011f6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	2202      	movs	r2, #2
 800118a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	68b9      	ldr	r1, [r7, #8]
 800119a:	68f8      	ldr	r0, [r7, #12]
 800119c:	f000 f9c0 	bl	8001520 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011a4:	223f      	movs	r2, #63	; 0x3f
 80011a6:	409a      	lsls	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681a      	ldr	r2, [r3, #0]
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f042 0216 	orr.w	r2, r2, #22
 80011ba:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	695a      	ldr	r2, [r3, #20]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ca:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d007      	beq.n	80011e4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0208 	orr.w	r2, r2, #8
 80011e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f042 0201 	orr.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e005      	b.n	8001202 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	2200      	movs	r2, #0
 80011fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80011fe:	2302      	movs	r3, #2
 8001200:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001202:	7dfb      	ldrb	r3, [r7, #23]
}
 8001204:	4618      	mov	r0, r3
 8001206:	3718      	adds	r7, #24
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001218:	4b92      	ldr	r3, [pc, #584]	; (8001464 <HAL_DMA_IRQHandler+0x258>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a92      	ldr	r2, [pc, #584]	; (8001468 <HAL_DMA_IRQHandler+0x25c>)
 800121e:	fba2 2303 	umull	r2, r3, r2, r3
 8001222:	0a9b      	lsrs	r3, r3, #10
 8001224:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800122a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800122c:	693b      	ldr	r3, [r7, #16]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001236:	2208      	movs	r2, #8
 8001238:	409a      	lsls	r2, r3
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d01a      	beq.n	8001278 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0304 	and.w	r3, r3, #4
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 0204 	bic.w	r2, r2, #4
 800125e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001264:	2208      	movs	r2, #8
 8001266:	409a      	lsls	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001270:	f043 0201 	orr.w	r2, r3, #1
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127c:	2201      	movs	r2, #1
 800127e:	409a      	lsls	r2, r3
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4013      	ands	r3, r2
 8001284:	2b00      	cmp	r3, #0
 8001286:	d012      	beq.n	80012ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	695b      	ldr	r3, [r3, #20]
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	2b00      	cmp	r3, #0
 8001294:	d00b      	beq.n	80012ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800129a:	2201      	movs	r2, #1
 800129c:	409a      	lsls	r2, r3
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a6:	f043 0202 	orr.w	r2, r3, #2
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b2:	2204      	movs	r2, #4
 80012b4:	409a      	lsls	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	4013      	ands	r3, r2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d012      	beq.n	80012e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f003 0302 	and.w	r3, r3, #2
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d00b      	beq.n	80012e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012d0:	2204      	movs	r2, #4
 80012d2:	409a      	lsls	r2, r3
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012dc:	f043 0204 	orr.w	r2, r3, #4
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012e8:	2210      	movs	r2, #16
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d043      	beq.n	800137c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0308 	and.w	r3, r3, #8
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d03c      	beq.n	800137c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001306:	2210      	movs	r2, #16
 8001308:	409a      	lsls	r2, r3
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001318:	2b00      	cmp	r3, #0
 800131a:	d018      	beq.n	800134e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001326:	2b00      	cmp	r3, #0
 8001328:	d108      	bne.n	800133c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	2b00      	cmp	r3, #0
 8001330:	d024      	beq.n	800137c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	4798      	blx	r3
 800133a:	e01f      	b.n	800137c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001340:	2b00      	cmp	r3, #0
 8001342:	d01b      	beq.n	800137c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	4798      	blx	r3
 800134c:	e016      	b.n	800137c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f022 0208 	bic.w	r2, r2, #8
 800136a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	2b00      	cmp	r3, #0
 8001372:	d003      	beq.n	800137c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001378:	6878      	ldr	r0, [r7, #4]
 800137a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001380:	2220      	movs	r2, #32
 8001382:	409a      	lsls	r2, r3
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	4013      	ands	r3, r2
 8001388:	2b00      	cmp	r3, #0
 800138a:	f000 808e 	beq.w	80014aa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f003 0310 	and.w	r3, r3, #16
 8001398:	2b00      	cmp	r3, #0
 800139a:	f000 8086 	beq.w	80014aa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a2:	2220      	movs	r2, #32
 80013a4:	409a      	lsls	r2, r3
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013b0:	b2db      	uxtb	r3, r3
 80013b2:	2b05      	cmp	r3, #5
 80013b4:	d136      	bne.n	8001424 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	681a      	ldr	r2, [r3, #0]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 0216 	bic.w	r2, r2, #22
 80013c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	695a      	ldr	r2, [r3, #20]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d103      	bne.n	80013e6 <HAL_DMA_IRQHandler+0x1da>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d007      	beq.n	80013f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 0208 	bic.w	r2, r2, #8
 80013f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013fa:	223f      	movs	r2, #63	; 0x3f
 80013fc:	409a      	lsls	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2201      	movs	r2, #1
 800140e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001416:	2b00      	cmp	r3, #0
 8001418:	d07d      	beq.n	8001516 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	4798      	blx	r3
        }
        return;
 8001422:	e078      	b.n	8001516 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800142e:	2b00      	cmp	r3, #0
 8001430:	d01c      	beq.n	800146c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d108      	bne.n	8001452 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001444:	2b00      	cmp	r3, #0
 8001446:	d030      	beq.n	80014aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	4798      	blx	r3
 8001450:	e02b      	b.n	80014aa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001456:	2b00      	cmp	r3, #0
 8001458:	d027      	beq.n	80014aa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	4798      	blx	r3
 8001462:	e022      	b.n	80014aa <HAL_DMA_IRQHandler+0x29e>
 8001464:	20000008 	.word	0x20000008
 8001468:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001476:	2b00      	cmp	r3, #0
 8001478:	d10f      	bne.n	800149a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f022 0210 	bic.w	r2, r2, #16
 8001488:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2200      	movs	r2, #0
 800148e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	2201      	movs	r2, #1
 8001496:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d003      	beq.n	80014aa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014a6:	6878      	ldr	r0, [r7, #4]
 80014a8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d032      	beq.n	8001518 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d022      	beq.n	8001504 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2205      	movs	r2, #5
 80014c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f022 0201 	bic.w	r2, r2, #1
 80014d4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	3301      	adds	r3, #1
 80014da:	60bb      	str	r3, [r7, #8]
 80014dc:	697a      	ldr	r2, [r7, #20]
 80014de:	429a      	cmp	r2, r3
 80014e0:	d307      	bcc.n	80014f2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0301 	and.w	r3, r3, #1
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f2      	bne.n	80014d6 <HAL_DMA_IRQHandler+0x2ca>
 80014f0:	e000      	b.n	80014f4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014f2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001508:	2b00      	cmp	r3, #0
 800150a:	d005      	beq.n	8001518 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001510:	6878      	ldr	r0, [r7, #4]
 8001512:	4798      	blx	r3
 8001514:	e000      	b.n	8001518 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001516:	bf00      	nop
    }
  }
}
 8001518:	3718      	adds	r7, #24
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop

08001520 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001520:	b480      	push	{r7}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	60f8      	str	r0, [r7, #12]
 8001528:	60b9      	str	r1, [r7, #8]
 800152a:	607a      	str	r2, [r7, #4]
 800152c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800153c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	683a      	ldr	r2, [r7, #0]
 8001544:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	2b40      	cmp	r3, #64	; 0x40
 800154c:	d108      	bne.n	8001560 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	68ba      	ldr	r2, [r7, #8]
 800155c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800155e:	e007      	b.n	8001570 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68ba      	ldr	r2, [r7, #8]
 8001566:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	60da      	str	r2, [r3, #12]
}
 8001570:	bf00      	nop
 8001572:	3714      	adds	r7, #20
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr

0800157c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	3b10      	subs	r3, #16
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <DMA_CalcBaseAndBitshift+0x60>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	091b      	lsrs	r3, r3, #4
 8001594:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <DMA_CalcBaseAndBitshift+0x64>)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	4413      	add	r3, r2
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	461a      	mov	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b03      	cmp	r3, #3
 80015a8:	d908      	bls.n	80015bc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <DMA_CalcBaseAndBitshift+0x68>)
 80015b2:	4013      	ands	r3, r2
 80015b4:	1d1a      	adds	r2, r3, #4
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	659a      	str	r2, [r3, #88]	; 0x58
 80015ba:	e006      	b.n	80015ca <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b08      	ldr	r3, [pc, #32]	; (80015e4 <DMA_CalcBaseAndBitshift+0x68>)
 80015c4:	4013      	ands	r3, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	aaaaaaab 	.word	0xaaaaaaab
 80015e0:	08004e10 	.word	0x08004e10
 80015e4:	fffffc00 	.word	0xfffffc00

080015e8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b085      	sub	sp, #20
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	699b      	ldr	r3, [r3, #24]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d11f      	bne.n	8001642 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	2b03      	cmp	r3, #3
 8001606:	d855      	bhi.n	80016b4 <DMA_CheckFifoParam+0xcc>
 8001608:	a201      	add	r2, pc, #4	; (adr r2, 8001610 <DMA_CheckFifoParam+0x28>)
 800160a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160e:	bf00      	nop
 8001610:	08001621 	.word	0x08001621
 8001614:	08001633 	.word	0x08001633
 8001618:	08001621 	.word	0x08001621
 800161c:	080016b5 	.word	0x080016b5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d045      	beq.n	80016b8 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 800162c:	2301      	movs	r3, #1
 800162e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001630:	e042      	b.n	80016b8 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001636:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800163a:	d13f      	bne.n	80016bc <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001640:	e03c      	b.n	80016bc <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800164a:	d121      	bne.n	8001690 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	2b03      	cmp	r3, #3
 8001650:	d836      	bhi.n	80016c0 <DMA_CheckFifoParam+0xd8>
 8001652:	a201      	add	r2, pc, #4	; (adr r2, 8001658 <DMA_CheckFifoParam+0x70>)
 8001654:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001658:	08001669 	.word	0x08001669
 800165c:	0800166f 	.word	0x0800166f
 8001660:	08001669 	.word	0x08001669
 8001664:	08001681 	.word	0x08001681
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	73fb      	strb	r3, [r7, #15]
      break;
 800166c:	e02f      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001672:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d024      	beq.n	80016c4 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800167e:	e021      	b.n	80016c4 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001684:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001688:	d11e      	bne.n	80016c8 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800168e:	e01b      	b.n	80016c8 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	2b02      	cmp	r3, #2
 8001694:	d902      	bls.n	800169c <DMA_CheckFifoParam+0xb4>
 8001696:	2b03      	cmp	r3, #3
 8001698:	d003      	beq.n	80016a2 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800169a:	e018      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800169c:	2301      	movs	r3, #1
 800169e:	73fb      	strb	r3, [r7, #15]
      break;
 80016a0:	e015      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d00e      	beq.n	80016cc <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	73fb      	strb	r3, [r7, #15]
      break;
 80016b2:	e00b      	b.n	80016cc <DMA_CheckFifoParam+0xe4>
      break;
 80016b4:	bf00      	nop
 80016b6:	e00a      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      break;
 80016b8:	bf00      	nop
 80016ba:	e008      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      break;
 80016bc:	bf00      	nop
 80016be:	e006      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      break;
 80016c0:	bf00      	nop
 80016c2:	e004      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      break;
 80016c4:	bf00      	nop
 80016c6:	e002      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      break;   
 80016c8:	bf00      	nop
 80016ca:	e000      	b.n	80016ce <DMA_CheckFifoParam+0xe6>
      break;
 80016cc:	bf00      	nop
    }
  } 
  
  return status; 
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3714      	adds	r7, #20
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016dc:	b480      	push	{r7}
 80016de:	b089      	sub	sp, #36	; 0x24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016f2:	2300      	movs	r3, #0
 80016f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	61fb      	str	r3, [r7, #28]
 80016fa:	e175      	b.n	80019e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016fc:	2201      	movs	r2, #1
 80016fe:	69fb      	ldr	r3, [r7, #28]
 8001700:	fa02 f303 	lsl.w	r3, r2, r3
 8001704:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	697a      	ldr	r2, [r7, #20]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001710:	693a      	ldr	r2, [r7, #16]
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	429a      	cmp	r2, r3
 8001716:	f040 8164 	bne.w	80019e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d003      	beq.n	800172a <HAL_GPIO_Init+0x4e>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	2b12      	cmp	r3, #18
 8001728:	d123      	bne.n	8001772 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800172a:	69fb      	ldr	r3, [r7, #28]
 800172c:	08da      	lsrs	r2, r3, #3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	3208      	adds	r2, #8
 8001732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f003 0307 	and.w	r3, r3, #7
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	220f      	movs	r2, #15
 8001742:	fa02 f303 	lsl.w	r3, r2, r3
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	fa02 f303 	lsl.w	r3, r2, r3
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	08da      	lsrs	r2, r3, #3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3208      	adds	r2, #8
 800176c:	69b9      	ldr	r1, [r7, #24]
 800176e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	2203      	movs	r2, #3
 800177e:	fa02 f303 	lsl.w	r3, r2, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4013      	ands	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	f003 0203 	and.w	r2, r3, #3
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	2b01      	cmp	r3, #1
 80017ac:	d00b      	beq.n	80017c6 <HAL_GPIO_Init+0xea>
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d007      	beq.n	80017c6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017ba:	2b11      	cmp	r3, #17
 80017bc:	d003      	beq.n	80017c6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017be:	683b      	ldr	r3, [r7, #0]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	2b12      	cmp	r3, #18
 80017c4:	d130      	bne.n	8001828 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	689b      	ldr	r3, [r3, #8]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80017cc:	69fb      	ldr	r3, [r7, #28]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	2203      	movs	r2, #3
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	69ba      	ldr	r2, [r7, #24]
 80017da:	4013      	ands	r3, r2
 80017dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	68da      	ldr	r2, [r3, #12]
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	69ba      	ldr	r2, [r7, #24]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69ba      	ldr	r2, [r7, #24]
 80017f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017fc:	2201      	movs	r2, #1
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	091b      	lsrs	r3, r3, #4
 8001812:	f003 0201 	and.w	r2, r3, #1
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	689a      	ldr	r2, [r3, #8]
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	fa02 f303 	lsl.w	r3, r2, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4313      	orrs	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80be 	beq.w	80019e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001866:	4b65      	ldr	r3, [pc, #404]	; (80019fc <HAL_GPIO_Init+0x320>)
 8001868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800186a:	4a64      	ldr	r2, [pc, #400]	; (80019fc <HAL_GPIO_Init+0x320>)
 800186c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001870:	6453      	str	r3, [r2, #68]	; 0x44
 8001872:	4b62      	ldr	r3, [pc, #392]	; (80019fc <HAL_GPIO_Init+0x320>)
 8001874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001876:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800187e:	4a60      	ldr	r2, [pc, #384]	; (8001a00 <HAL_GPIO_Init+0x324>)
 8001880:	69fb      	ldr	r3, [r7, #28]
 8001882:	089b      	lsrs	r3, r3, #2
 8001884:	3302      	adds	r3, #2
 8001886:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f003 0303 	and.w	r3, r3, #3
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	220f      	movs	r2, #15
 8001896:	fa02 f303 	lsl.w	r3, r2, r3
 800189a:	43db      	mvns	r3, r3
 800189c:	69ba      	ldr	r2, [r7, #24]
 800189e:	4013      	ands	r3, r2
 80018a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a57      	ldr	r2, [pc, #348]	; (8001a04 <HAL_GPIO_Init+0x328>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d037      	beq.n	800191a <HAL_GPIO_Init+0x23e>
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a56      	ldr	r2, [pc, #344]	; (8001a08 <HAL_GPIO_Init+0x32c>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d031      	beq.n	8001916 <HAL_GPIO_Init+0x23a>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	4a55      	ldr	r2, [pc, #340]	; (8001a0c <HAL_GPIO_Init+0x330>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d02b      	beq.n	8001912 <HAL_GPIO_Init+0x236>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	4a54      	ldr	r2, [pc, #336]	; (8001a10 <HAL_GPIO_Init+0x334>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d025      	beq.n	800190e <HAL_GPIO_Init+0x232>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4a53      	ldr	r2, [pc, #332]	; (8001a14 <HAL_GPIO_Init+0x338>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d01f      	beq.n	800190a <HAL_GPIO_Init+0x22e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a52      	ldr	r2, [pc, #328]	; (8001a18 <HAL_GPIO_Init+0x33c>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d019      	beq.n	8001906 <HAL_GPIO_Init+0x22a>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a51      	ldr	r2, [pc, #324]	; (8001a1c <HAL_GPIO_Init+0x340>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d013      	beq.n	8001902 <HAL_GPIO_Init+0x226>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	4a50      	ldr	r2, [pc, #320]	; (8001a20 <HAL_GPIO_Init+0x344>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00d      	beq.n	80018fe <HAL_GPIO_Init+0x222>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	4a4f      	ldr	r2, [pc, #316]	; (8001a24 <HAL_GPIO_Init+0x348>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d007      	beq.n	80018fa <HAL_GPIO_Init+0x21e>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a4e      	ldr	r2, [pc, #312]	; (8001a28 <HAL_GPIO_Init+0x34c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d101      	bne.n	80018f6 <HAL_GPIO_Init+0x21a>
 80018f2:	2309      	movs	r3, #9
 80018f4:	e012      	b.n	800191c <HAL_GPIO_Init+0x240>
 80018f6:	230a      	movs	r3, #10
 80018f8:	e010      	b.n	800191c <HAL_GPIO_Init+0x240>
 80018fa:	2308      	movs	r3, #8
 80018fc:	e00e      	b.n	800191c <HAL_GPIO_Init+0x240>
 80018fe:	2307      	movs	r3, #7
 8001900:	e00c      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001902:	2306      	movs	r3, #6
 8001904:	e00a      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001906:	2305      	movs	r3, #5
 8001908:	e008      	b.n	800191c <HAL_GPIO_Init+0x240>
 800190a:	2304      	movs	r3, #4
 800190c:	e006      	b.n	800191c <HAL_GPIO_Init+0x240>
 800190e:	2303      	movs	r3, #3
 8001910:	e004      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001912:	2302      	movs	r3, #2
 8001914:	e002      	b.n	800191c <HAL_GPIO_Init+0x240>
 8001916:	2301      	movs	r3, #1
 8001918:	e000      	b.n	800191c <HAL_GPIO_Init+0x240>
 800191a:	2300      	movs	r3, #0
 800191c:	69fa      	ldr	r2, [r7, #28]
 800191e:	f002 0203 	and.w	r2, r2, #3
 8001922:	0092      	lsls	r2, r2, #2
 8001924:	4093      	lsls	r3, r2
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800192c:	4934      	ldr	r1, [pc, #208]	; (8001a00 <HAL_GPIO_Init+0x324>)
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	3302      	adds	r3, #2
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800193a:	4b3c      	ldr	r3, [pc, #240]	; (8001a2c <HAL_GPIO_Init+0x350>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	43db      	mvns	r3, r3
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	4013      	ands	r3, r2
 8001948:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d003      	beq.n	800195e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001956:	69ba      	ldr	r2, [r7, #24]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	4313      	orrs	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800195e:	4a33      	ldr	r2, [pc, #204]	; (8001a2c <HAL_GPIO_Init+0x350>)
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001964:	4b31      	ldr	r3, [pc, #196]	; (8001a2c <HAL_GPIO_Init+0x350>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	43db      	mvns	r3, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4013      	ands	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001988:	4a28      	ldr	r2, [pc, #160]	; (8001a2c <HAL_GPIO_Init+0x350>)
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800198e:	4b27      	ldr	r3, [pc, #156]	; (8001a2c <HAL_GPIO_Init+0x350>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d003      	beq.n	80019b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019b2:	4a1e      	ldr	r2, [pc, #120]	; (8001a2c <HAL_GPIO_Init+0x350>)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b8:	4b1c      	ldr	r3, [pc, #112]	; (8001a2c <HAL_GPIO_Init+0x350>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	43db      	mvns	r3, r3
 80019c2:	69ba      	ldr	r2, [r7, #24]
 80019c4:	4013      	ands	r3, r2
 80019c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d003      	beq.n	80019dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019dc:	4a13      	ldr	r2, [pc, #76]	; (8001a2c <HAL_GPIO_Init+0x350>)
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3301      	adds	r3, #1
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	2b0f      	cmp	r3, #15
 80019ec:	f67f ae86 	bls.w	80016fc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019f0:	bf00      	nop
 80019f2:	3724      	adds	r7, #36	; 0x24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40023800 	.word	0x40023800
 8001a00:	40013800 	.word	0x40013800
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020c00 	.word	0x40020c00
 8001a14:	40021000 	.word	0x40021000
 8001a18:	40021400 	.word	0x40021400
 8001a1c:	40021800 	.word	0x40021800
 8001a20:	40021c00 	.word	0x40021c00
 8001a24:	40022000 	.word	0x40022000
 8001a28:	40022400 	.word	0x40022400
 8001a2c:	40013c00 	.word	0x40013c00

08001a30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	807b      	strh	r3, [r7, #2]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a40:	787b      	ldrb	r3, [r7, #1]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001a4c:	e003      	b.n	8001a56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001a4e:	887b      	ldrh	r3, [r7, #2]
 8001a50:	041a      	lsls	r2, r3, #16
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	619a      	str	r2, [r3, #24]
}
 8001a56:	bf00      	nop
 8001a58:	370c      	adds	r7, #12
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
	...

08001a64 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a6e:	4b23      	ldr	r3, [pc, #140]	; (8001afc <HAL_PWREx_EnableOverDrive+0x98>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	4a22      	ldr	r2, [pc, #136]	; (8001afc <HAL_PWREx_EnableOverDrive+0x98>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	; 0x40
 8001a7a:	4b20      	ldr	r3, [pc, #128]	; (8001afc <HAL_PWREx_EnableOverDrive+0x98>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a82:	603b      	str	r3, [r7, #0]
 8001a84:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001a86:	4b1e      	ldr	r3, [pc, #120]	; (8001b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a1d      	ldr	r2, [pc, #116]	; (8001b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a90:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001a92:	f7fe fda3 	bl	80005dc <HAL_GetTick>
 8001a96:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001a98:	e009      	b.n	8001aae <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001a9a:	f7fe fd9f 	bl	80005dc <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001aa8:	d901      	bls.n	8001aae <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e022      	b.n	8001af4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001aae:	4b14      	ldr	r3, [pc, #80]	; (8001b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ab6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aba:	d1ee      	bne.n	8001a9a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001abc:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a0f      	ldr	r2, [pc, #60]	; (8001b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ac2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac8:	f7fe fd88 	bl	80005dc <HAL_GetTick>
 8001acc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ace:	e009      	b.n	8001ae4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001ad0:	f7fe fd84 	bl	80005dc <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ade:	d901      	bls.n	8001ae4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	e007      	b.n	8001af4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001ae4:	4b06      	ldr	r3, [pc, #24]	; (8001b00 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001af0:	d1ee      	bne.n	8001ad0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40007000 	.word	0x40007000

08001b04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b086      	sub	sp, #24
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e25e      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b28:	4b96      	ldr	r3, [pc, #600]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001b34:	4b93      	ldr	r3, [pc, #588]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x62>
 8001b40:	4b90      	ldr	r3, [pc, #576]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4b8d      	ldr	r3, [pc, #564]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x130>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d168      	bne.n	8001c34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e238      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x7a>
 8001b70:	4b84      	ldr	r3, [pc, #528]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a83      	ldr	r2, [pc, #524]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e02e      	b.n	8001bdc <HAL_RCC_OscConfig+0xd8>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x9c>
 8001b86:	4b7f      	ldr	r3, [pc, #508]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7e      	ldr	r2, [pc, #504]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b7c      	ldr	r3, [pc, #496]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a7b      	ldr	r2, [pc, #492]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xd8>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xc0>
 8001baa:	4b76      	ldr	r3, [pc, #472]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a75      	ldr	r2, [pc, #468]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b73      	ldr	r3, [pc, #460]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a72      	ldr	r2, [pc, #456]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xd8>
 8001bc4:	4b6f      	ldr	r3, [pc, #444]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6e      	ldr	r2, [pc, #440]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b6c      	ldr	r3, [pc, #432]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a6b      	ldr	r2, [pc, #428]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be4:	f7fe fcfa 	bl	80005dc <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001bec:	f7fe fcf6 	bl	80005dc <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1ec      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b61      	ldr	r3, [pc, #388]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xe8>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0c:	f7fe fce6 	bl	80005dc <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c14:	f7fe fce2 	bl	80005dc <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1d8      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b57      	ldr	r3, [pc, #348]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x110>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d069      	beq.n	8001d16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c42:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001c4e:	4b4d      	ldr	r3, [pc, #308]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x190>
 8001c5a:	4b4a      	ldr	r3, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b47      	ldr	r3, [pc, #284]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17a>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	68db      	ldr	r3, [r3, #12]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1ac      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b41      	ldr	r3, [pc, #260]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	493d      	ldr	r1, [pc, #244]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e040      	b.n	8001d16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d023      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b39      	ldr	r3, [pc, #228]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a38      	ldr	r2, [pc, #224]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7fe fc98 	bl	80005dc <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cb0:	f7fe fc94 	bl	80005dc <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e18a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cc2:	4b30      	ldr	r3, [pc, #192]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0302 	and.w	r3, r3, #2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cce:	4b2d      	ldr	r3, [pc, #180]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	4929      	ldr	r1, [pc, #164]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]
 8001ce2:	e018      	b.n	8001d16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ce4:	4b27      	ldr	r3, [pc, #156]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf0:	f7fe fc74 	bl	80005dc <HAL_GetTick>
 8001cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cf6:	e008      	b.n	8001d0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cf8:	f7fe fc70 	bl	80005dc <HAL_GetTick>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	1ad3      	subs	r3, r2, r3
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d901      	bls.n	8001d0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001d06:	2303      	movs	r3, #3
 8001d08:	e166      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d0a:	4b1e      	ldr	r3, [pc, #120]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0302 	and.w	r3, r3, #2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d1f0      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f003 0308 	and.w	r3, r3, #8
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d038      	beq.n	8001d94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d019      	beq.n	8001d5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d2a:	4b16      	ldr	r3, [pc, #88]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d2e:	4a15      	ldr	r2, [pc, #84]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d36:	f7fe fc51 	bl	80005dc <HAL_GetTick>
 8001d3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3c:	e008      	b.n	8001d50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d3e:	f7fe fc4d 	bl	80005dc <HAL_GetTick>
 8001d42:	4602      	mov	r2, r0
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	1ad3      	subs	r3, r2, r3
 8001d48:	2b02      	cmp	r3, #2
 8001d4a:	d901      	bls.n	8001d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	e143      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d0f0      	beq.n	8001d3e <HAL_RCC_OscConfig+0x23a>
 8001d5c:	e01a      	b.n	8001d94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001d60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d62:	4a08      	ldr	r2, [pc, #32]	; (8001d84 <HAL_RCC_OscConfig+0x280>)
 8001d64:	f023 0301 	bic.w	r3, r3, #1
 8001d68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6a:	f7fe fc37 	bl	80005dc <HAL_GetTick>
 8001d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d70:	e00a      	b.n	8001d88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d72:	f7fe fc33 	bl	80005dc <HAL_GetTick>
 8001d76:	4602      	mov	r2, r0
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	1ad3      	subs	r3, r2, r3
 8001d7c:	2b02      	cmp	r3, #2
 8001d7e:	d903      	bls.n	8001d88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e129      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
 8001d84:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d88:	4b95      	ldr	r3, [pc, #596]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d1ee      	bne.n	8001d72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0304 	and.w	r3, r3, #4
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	f000 80a4 	beq.w	8001eea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001da2:	4b8f      	ldr	r3, [pc, #572]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10d      	bne.n	8001dca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dae:	4b8c      	ldr	r3, [pc, #560]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001db2:	4a8b      	ldr	r2, [pc, #556]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db8:	6413      	str	r3, [r2, #64]	; 0x40
 8001dba:	4b89      	ldr	r3, [pc, #548]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dc2:	60fb      	str	r3, [r7, #12]
 8001dc4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dca:	4b86      	ldr	r3, [pc, #536]	; (8001fe4 <HAL_RCC_OscConfig+0x4e0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d118      	bne.n	8001e08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001dd6:	4b83      	ldr	r3, [pc, #524]	; (8001fe4 <HAL_RCC_OscConfig+0x4e0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a82      	ldr	r2, [pc, #520]	; (8001fe4 <HAL_RCC_OscConfig+0x4e0>)
 8001ddc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001de0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de2:	f7fe fbfb 	bl	80005dc <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001dea:	f7fe fbf7 	bl	80005dc <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b64      	cmp	r3, #100	; 0x64
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e0ed      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dfc:	4b79      	ldr	r3, [pc, #484]	; (8001fe4 <HAL_RCC_OscConfig+0x4e0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d106      	bne.n	8001e1e <HAL_RCC_OscConfig+0x31a>
 8001e10:	4b73      	ldr	r3, [pc, #460]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e14:	4a72      	ldr	r2, [pc, #456]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e16:	f043 0301 	orr.w	r3, r3, #1
 8001e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8001e1c:	e02d      	b.n	8001e7a <HAL_RCC_OscConfig+0x376>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d10c      	bne.n	8001e40 <HAL_RCC_OscConfig+0x33c>
 8001e26:	4b6e      	ldr	r3, [pc, #440]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e2a:	4a6d      	ldr	r2, [pc, #436]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e2c:	f023 0301 	bic.w	r3, r3, #1
 8001e30:	6713      	str	r3, [r2, #112]	; 0x70
 8001e32:	4b6b      	ldr	r3, [pc, #428]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e36:	4a6a      	ldr	r2, [pc, #424]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e38:	f023 0304 	bic.w	r3, r3, #4
 8001e3c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e3e:	e01c      	b.n	8001e7a <HAL_RCC_OscConfig+0x376>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d10c      	bne.n	8001e62 <HAL_RCC_OscConfig+0x35e>
 8001e48:	4b65      	ldr	r3, [pc, #404]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e4c:	4a64      	ldr	r2, [pc, #400]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e4e:	f043 0304 	orr.w	r3, r3, #4
 8001e52:	6713      	str	r3, [r2, #112]	; 0x70
 8001e54:	4b62      	ldr	r3, [pc, #392]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e58:	4a61      	ldr	r2, [pc, #388]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001e60:	e00b      	b.n	8001e7a <HAL_RCC_OscConfig+0x376>
 8001e62:	4b5f      	ldr	r3, [pc, #380]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e66:	4a5e      	ldr	r2, [pc, #376]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e68:	f023 0301 	bic.w	r3, r3, #1
 8001e6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001e6e:	4b5c      	ldr	r3, [pc, #368]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e72:	4a5b      	ldr	r2, [pc, #364]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001e74:	f023 0304 	bic.w	r3, r3, #4
 8001e78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d015      	beq.n	8001eae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7fe fbab 	bl	80005dc <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7fe fba7 	bl	80005dc <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e09b      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ea0:	4b4f      	ldr	r3, [pc, #316]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0ee      	beq.n	8001e8a <HAL_RCC_OscConfig+0x386>
 8001eac:	e014      	b.n	8001ed8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eae:	f7fe fb95 	bl	80005dc <HAL_GetTick>
 8001eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb4:	e00a      	b.n	8001ecc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe fb91 	bl	80005dc <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d901      	bls.n	8001ecc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	e085      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ecc:	4b44      	ldr	r3, [pc, #272]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d1ee      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ed8:	7dfb      	ldrb	r3, [r7, #23]
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d105      	bne.n	8001eea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ede:	4b40      	ldr	r3, [pc, #256]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	699b      	ldr	r3, [r3, #24]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d071      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef2:	4b3b      	ldr	r3, [pc, #236]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f003 030c 	and.w	r3, r3, #12
 8001efa:	2b08      	cmp	r3, #8
 8001efc:	d069      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	699b      	ldr	r3, [r3, #24]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d14b      	bne.n	8001f9e <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f06:	4b36      	ldr	r3, [pc, #216]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a35      	ldr	r2, [pc, #212]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f12:	f7fe fb63 	bl	80005dc <HAL_GetTick>
 8001f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f18:	e008      	b.n	8001f2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fb5f 	bl	80005dc <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	693b      	ldr	r3, [r7, #16]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d901      	bls.n	8001f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e055      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f2c:	4b2c      	ldr	r3, [pc, #176]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d1f0      	bne.n	8001f1a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	69da      	ldr	r2, [r3, #28]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6a1b      	ldr	r3, [r3, #32]
 8001f40:	431a      	orrs	r2, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f46:	019b      	lsls	r3, r3, #6
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	085b      	lsrs	r3, r3, #1
 8001f50:	3b01      	subs	r3, #1
 8001f52:	041b      	lsls	r3, r3, #16
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	061b      	lsls	r3, r3, #24
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	071b      	lsls	r3, r3, #28
 8001f64:	491e      	ldr	r1, [pc, #120]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f6a:	4b1d      	ldr	r3, [pc, #116]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fb31 	bl	80005dc <HAL_GetTick>
 8001f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f7e:	f7fe fb2d 	bl	80005dc <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e023      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f90:	4b13      	ldr	r3, [pc, #76]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0f0      	beq.n	8001f7e <HAL_RCC_OscConfig+0x47a>
 8001f9c:	e01b      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a0f      	ldr	r2, [pc, #60]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001fa4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001faa:	f7fe fb17 	bl	80005dc <HAL_GetTick>
 8001fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fb0:	e008      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fb2:	f7fe fb13 	bl	80005dc <HAL_GetTick>
 8001fb6:	4602      	mov	r2, r0
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	1ad3      	subs	r3, r2, r3
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d901      	bls.n	8001fc4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fc0:	2303      	movs	r3, #3
 8001fc2:	e009      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_RCC_OscConfig+0x4dc>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f0      	bne.n	8001fb2 <HAL_RCC_OscConfig+0x4ae>
 8001fd0:	e001      	b.n	8001fd6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e000      	b.n	8001fd8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40023800 	.word	0x40023800
 8001fe4:	40007000 	.word	0x40007000

08001fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0ce      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002000:	4b69      	ldr	r3, [pc, #420]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	683a      	ldr	r2, [r7, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	d910      	bls.n	8002030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200e:	4b66      	ldr	r3, [pc, #408]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 020f 	bic.w	r2, r3, #15
 8002016:	4964      	ldr	r1, [pc, #400]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	4313      	orrs	r3, r2
 800201c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b62      	ldr	r3, [pc, #392]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e0b6      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d020      	beq.n	800207e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f003 0304 	and.w	r3, r3, #4
 8002044:	2b00      	cmp	r3, #0
 8002046:	d005      	beq.n	8002054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002048:	4b58      	ldr	r3, [pc, #352]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	4a57      	ldr	r2, [pc, #348]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0308 	and.w	r3, r3, #8
 800205c:	2b00      	cmp	r3, #0
 800205e:	d005      	beq.n	800206c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002060:	4b52      	ldr	r3, [pc, #328]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800206a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800206c:	4b4f      	ldr	r3, [pc, #316]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	494c      	ldr	r1, [pc, #304]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d040      	beq.n	800210c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d107      	bne.n	80020a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002092:	4b46      	ldr	r3, [pc, #280]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d115      	bne.n	80020ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e07d      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d107      	bne.n	80020ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020aa:	4b40      	ldr	r3, [pc, #256]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d109      	bne.n	80020ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e071      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ba:	4b3c      	ldr	r3, [pc, #240]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0302 	and.w	r3, r3, #2
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e069      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f023 0203 	bic.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	4935      	ldr	r1, [pc, #212]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020dc:	f7fe fa7e 	bl	80005dc <HAL_GetTick>
 80020e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e2:	e00a      	b.n	80020fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020e4:	f7fe fa7a 	bl	80005dc <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d901      	bls.n	80020fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020f6:	2303      	movs	r3, #3
 80020f8:	e051      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fa:	4b2c      	ldr	r3, [pc, #176]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 020c 	and.w	r2, r3, #12
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	429a      	cmp	r2, r3
 800210a:	d1eb      	bne.n	80020e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800210c:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	429a      	cmp	r2, r3
 8002118:	d210      	bcs.n	800213c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800211a:	4b23      	ldr	r3, [pc, #140]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f023 020f 	bic.w	r2, r3, #15
 8002122:	4921      	ldr	r1, [pc, #132]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	4313      	orrs	r3, r2
 8002128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800212a:	4b1f      	ldr	r3, [pc, #124]	; (80021a8 <HAL_RCC_ClockConfig+0x1c0>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 030f 	and.w	r3, r3, #15
 8002132:	683a      	ldr	r2, [r7, #0]
 8002134:	429a      	cmp	r2, r3
 8002136:	d001      	beq.n	800213c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e030      	b.n	800219e <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d008      	beq.n	800215a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	4915      	ldr	r1, [pc, #84]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002156:	4313      	orrs	r3, r2
 8002158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d009      	beq.n	800217a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	490d      	ldr	r1, [pc, #52]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	4313      	orrs	r3, r2
 8002178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800217a:	f000 f81d 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 800217e:	4601      	mov	r1, r0
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <HAL_RCC_ClockConfig+0x1c4>)
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	091b      	lsrs	r3, r3, #4
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	4a09      	ldr	r2, [pc, #36]	; (80021b0 <HAL_RCC_ClockConfig+0x1c8>)
 800218c:	5cd3      	ldrb	r3, [r2, r3]
 800218e:	fa21 f303 	lsr.w	r3, r1, r3
 8002192:	4a08      	ldr	r2, [pc, #32]	; (80021b4 <HAL_RCC_ClockConfig+0x1cc>)
 8002194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002196:	2000      	movs	r0, #0
 8002198:	f7fe f9dc 	bl	8000554 <HAL_InitTick>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023c00 	.word	0x40023c00
 80021ac:	40023800 	.word	0x40023800
 80021b0:	08004e18 	.word	0x08004e18
 80021b4:	20000008 	.word	0x20000008

080021b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	2300      	movs	r3, #0
 80021c4:	60fb      	str	r3, [r7, #12]
 80021c6:	2300      	movs	r3, #0
 80021c8:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80021ca:	2300      	movs	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021ce:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d007      	beq.n	80021ea <HAL_RCC_GetSysClockFreq+0x32>
 80021da:	2b08      	cmp	r3, #8
 80021dc:	d008      	beq.n	80021f0 <HAL_RCC_GetSysClockFreq+0x38>
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f040 808d 	bne.w	80022fe <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021e4:	4b4b      	ldr	r3, [pc, #300]	; (8002314 <HAL_RCC_GetSysClockFreq+0x15c>)
 80021e6:	60bb      	str	r3, [r7, #8]
       break;
 80021e8:	e08c      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021ea:	4b4b      	ldr	r3, [pc, #300]	; (8002318 <HAL_RCC_GetSysClockFreq+0x160>)
 80021ec:	60bb      	str	r3, [r7, #8]
      break;
 80021ee:	e089      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021f0:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_GetSysClockFreq+0x158>)
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021f8:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021fa:	4b45      	ldr	r3, [pc, #276]	; (8002310 <HAL_RCC_GetSysClockFreq+0x158>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d023      	beq.n	800224e <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002206:	4b42      	ldr	r3, [pc, #264]	; (8002310 <HAL_RCC_GetSysClockFreq+0x158>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	099b      	lsrs	r3, r3, #6
 800220c:	f04f 0400 	mov.w	r4, #0
 8002210:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	ea03 0501 	and.w	r5, r3, r1
 800221c:	ea04 0602 	and.w	r6, r4, r2
 8002220:	4a3d      	ldr	r2, [pc, #244]	; (8002318 <HAL_RCC_GetSysClockFreq+0x160>)
 8002222:	fb02 f106 	mul.w	r1, r2, r6
 8002226:	2200      	movs	r2, #0
 8002228:	fb02 f205 	mul.w	r2, r2, r5
 800222c:	440a      	add	r2, r1
 800222e:	493a      	ldr	r1, [pc, #232]	; (8002318 <HAL_RCC_GetSysClockFreq+0x160>)
 8002230:	fba5 0101 	umull	r0, r1, r5, r1
 8002234:	1853      	adds	r3, r2, r1
 8002236:	4619      	mov	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f04f 0400 	mov.w	r4, #0
 800223e:	461a      	mov	r2, r3
 8002240:	4623      	mov	r3, r4
 8002242:	f7fd fff9 	bl	8000238 <__aeabi_uldivmod>
 8002246:	4603      	mov	r3, r0
 8002248:	460c      	mov	r4, r1
 800224a:	60fb      	str	r3, [r7, #12]
 800224c:	e049      	b.n	80022e2 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800224e:	4b30      	ldr	r3, [pc, #192]	; (8002310 <HAL_RCC_GetSysClockFreq+0x158>)
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	099b      	lsrs	r3, r3, #6
 8002254:	f04f 0400 	mov.w	r4, #0
 8002258:	f240 11ff 	movw	r1, #511	; 0x1ff
 800225c:	f04f 0200 	mov.w	r2, #0
 8002260:	ea03 0501 	and.w	r5, r3, r1
 8002264:	ea04 0602 	and.w	r6, r4, r2
 8002268:	4629      	mov	r1, r5
 800226a:	4632      	mov	r2, r6
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	f04f 0400 	mov.w	r4, #0
 8002274:	0154      	lsls	r4, r2, #5
 8002276:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800227a:	014b      	lsls	r3, r1, #5
 800227c:	4619      	mov	r1, r3
 800227e:	4622      	mov	r2, r4
 8002280:	1b49      	subs	r1, r1, r5
 8002282:	eb62 0206 	sbc.w	r2, r2, r6
 8002286:	f04f 0300 	mov.w	r3, #0
 800228a:	f04f 0400 	mov.w	r4, #0
 800228e:	0194      	lsls	r4, r2, #6
 8002290:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002294:	018b      	lsls	r3, r1, #6
 8002296:	1a5b      	subs	r3, r3, r1
 8002298:	eb64 0402 	sbc.w	r4, r4, r2
 800229c:	f04f 0100 	mov.w	r1, #0
 80022a0:	f04f 0200 	mov.w	r2, #0
 80022a4:	00e2      	lsls	r2, r4, #3
 80022a6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022aa:	00d9      	lsls	r1, r3, #3
 80022ac:	460b      	mov	r3, r1
 80022ae:	4614      	mov	r4, r2
 80022b0:	195b      	adds	r3, r3, r5
 80022b2:	eb44 0406 	adc.w	r4, r4, r6
 80022b6:	f04f 0100 	mov.w	r1, #0
 80022ba:	f04f 0200 	mov.w	r2, #0
 80022be:	02a2      	lsls	r2, r4, #10
 80022c0:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80022c4:	0299      	lsls	r1, r3, #10
 80022c6:	460b      	mov	r3, r1
 80022c8:	4614      	mov	r4, r2
 80022ca:	4618      	mov	r0, r3
 80022cc:	4621      	mov	r1, r4
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f04f 0400 	mov.w	r4, #0
 80022d4:	461a      	mov	r2, r3
 80022d6:	4623      	mov	r3, r4
 80022d8:	f7fd ffae 	bl	8000238 <__aeabi_uldivmod>
 80022dc:	4603      	mov	r3, r0
 80022de:	460c      	mov	r4, r1
 80022e0:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_GetSysClockFreq+0x158>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	0c1b      	lsrs	r3, r3, #16
 80022e8:	f003 0303 	and.w	r3, r3, #3
 80022ec:	3301      	adds	r3, #1
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80022f2:	68fa      	ldr	r2, [r7, #12]
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022fa:	60bb      	str	r3, [r7, #8]
      break;
 80022fc:	e002      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002300:	60bb      	str	r3, [r7, #8]
      break;
 8002302:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002304:	68bb      	ldr	r3, [r7, #8]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3714      	adds	r7, #20
 800230a:	46bd      	mov	sp, r7
 800230c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800230e:	bf00      	nop
 8002310:	40023800 	.word	0x40023800
 8002314:	00f42400 	.word	0x00f42400
 8002318:	017d7840 	.word	0x017d7840

0800231c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002320:	4b03      	ldr	r3, [pc, #12]	; (8002330 <HAL_RCC_GetHCLKFreq+0x14>)
 8002322:	681b      	ldr	r3, [r3, #0]
}
 8002324:	4618      	mov	r0, r3
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr
 800232e:	bf00      	nop
 8002330:	20000008 	.word	0x20000008

08002334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002338:	f7ff fff0 	bl	800231c <HAL_RCC_GetHCLKFreq>
 800233c:	4601      	mov	r1, r0
 800233e:	4b05      	ldr	r3, [pc, #20]	; (8002354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	0a9b      	lsrs	r3, r3, #10
 8002344:	f003 0307 	and.w	r3, r3, #7
 8002348:	4a03      	ldr	r2, [pc, #12]	; (8002358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800234a:	5cd3      	ldrb	r3, [r2, r3]
 800234c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002350:	4618      	mov	r0, r3
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40023800 	.word	0x40023800
 8002358:	08004e28 	.word	0x08004e28

0800235c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002360:	f7ff ffdc 	bl	800231c <HAL_RCC_GetHCLKFreq>
 8002364:	4601      	mov	r1, r0
 8002366:	4b05      	ldr	r3, [pc, #20]	; (800237c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	0b5b      	lsrs	r3, r3, #13
 800236c:	f003 0307 	and.w	r3, r3, #7
 8002370:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002372:	5cd3      	ldrb	r3, [r2, r3]
 8002374:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002378:	4618      	mov	r0, r3
 800237a:	bd80      	pop	{r7, pc}
 800237c:	40023800 	.word	0x40023800
 8002380:	08004e28 	.word	0x08004e28

08002384 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002394:	2300      	movs	r3, #0
 8002396:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0301 	and.w	r3, r3, #1
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d012      	beq.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023ac:	4b69      	ldr	r3, [pc, #420]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	4a68      	ldr	r2, [pc, #416]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023b2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023b6:	6093      	str	r3, [r2, #8]
 80023b8:	4b66      	ldr	r3, [pc, #408]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023c0:	4964      	ldr	r1, [pc, #400]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d101      	bne.n	80023d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023ce:	2301      	movs	r3, #1
 80023d0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d017      	beq.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023de:	4b5d      	ldr	r3, [pc, #372]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	4959      	ldr	r1, [pc, #356]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ee:	4313      	orrs	r3, r2
 80023f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023fc:	d101      	bne.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80023fe:	2301      	movs	r3, #1
 8002400:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800240a:	2301      	movs	r3, #1
 800240c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d017      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800241a:	4b4e      	ldr	r3, [pc, #312]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002420:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	494a      	ldr	r1, [pc, #296]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242a:	4313      	orrs	r3, r2
 800242c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002434:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002438:	d101      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800243a:	2301      	movs	r3, #1
 800243c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d101      	bne.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002446:	2301      	movs	r3, #1
 8002448:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002456:	2301      	movs	r3, #1
 8002458:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0320 	and.w	r3, r3, #32
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 808b 	beq.w	800257e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002468:	4b3a      	ldr	r3, [pc, #232]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	4a39      	ldr	r2, [pc, #228]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800246e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002472:	6413      	str	r3, [r2, #64]	; 0x40
 8002474:	4b37      	ldr	r3, [pc, #220]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	60bb      	str	r3, [r7, #8]
 800247e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002480:	4b35      	ldr	r3, [pc, #212]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a34      	ldr	r2, [pc, #208]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002486:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800248a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248c:	f7fe f8a6 	bl	80005dc <HAL_GetTick>
 8002490:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002494:	f7fe f8a2 	bl	80005dc <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e38d      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024a6:	4b2c      	ldr	r3, [pc, #176]	; (8002558 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d035      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d02e      	beq.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024d0:	4b20      	ldr	r3, [pc, #128]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024d8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024da:	4b1e      	ldr	r3, [pc, #120]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ea:	4a1a      	ldr	r2, [pc, #104]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80024f2:	4a18      	ldr	r2, [pc, #96]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80024f8:	4b16      	ldr	r3, [pc, #88]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fc:	f003 0301 	and.w	r3, r3, #1
 8002500:	2b01      	cmp	r3, #1
 8002502:	d114      	bne.n	800252e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002504:	f7fe f86a 	bl	80005dc <HAL_GetTick>
 8002508:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250a:	e00a      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800250c:	f7fe f866 	bl	80005dc <HAL_GetTick>
 8002510:	4602      	mov	r2, r0
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	1ad3      	subs	r3, r2, r3
 8002516:	f241 3288 	movw	r2, #5000	; 0x1388
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e34f      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	4b0c      	ldr	r3, [pc, #48]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d0ee      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002532:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002536:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800253a:	d111      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800254a:	400b      	ands	r3, r1
 800254c:	4901      	ldr	r1, [pc, #4]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800254e:	4313      	orrs	r3, r2
 8002550:	608b      	str	r3, [r1, #8]
 8002552:	e00b      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002554:	40023800 	.word	0x40023800
 8002558:	40007000 	.word	0x40007000
 800255c:	0ffffcff 	.word	0x0ffffcff
 8002560:	4bb3      	ldr	r3, [pc, #716]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	4ab2      	ldr	r2, [pc, #712]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002566:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800256a:	6093      	str	r3, [r2, #8]
 800256c:	4bb0      	ldr	r3, [pc, #704]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800256e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002574:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002578:	49ad      	ldr	r1, [pc, #692]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257a:	4313      	orrs	r3, r2
 800257c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0310 	and.w	r3, r3, #16
 8002586:	2b00      	cmp	r3, #0
 8002588:	d010      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800258a:	4ba9      	ldr	r3, [pc, #676]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002590:	4aa7      	ldr	r2, [pc, #668]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002592:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002596:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800259a:	4ba5      	ldr	r3, [pc, #660]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800259c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025a4:	49a2      	ldr	r1, [pc, #648]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025b8:	4b9d      	ldr	r3, [pc, #628]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025c6:	499a      	ldr	r1, [pc, #616]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025da:	4b95      	ldr	r3, [pc, #596]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025e8:	4991      	ldr	r1, [pc, #580]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80025fc:	4b8c      	ldr	r3, [pc, #560]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800260a:	4989      	ldr	r1, [pc, #548]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800261e:	4b84      	ldr	r3, [pc, #528]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800262c:	4980      	ldr	r1, [pc, #512]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002640:	4b7b      	ldr	r3, [pc, #492]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f023 0203 	bic.w	r2, r3, #3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4978      	ldr	r1, [pc, #480]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002662:	4b73      	ldr	r3, [pc, #460]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f023 020c 	bic.w	r2, r3, #12
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002670:	496f      	ldr	r1, [pc, #444]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002684:	4b6a      	ldr	r3, [pc, #424]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002692:	4967      	ldr	r1, [pc, #412]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00a      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026a6:	4b62      	ldr	r3, [pc, #392]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b4:	495e      	ldr	r1, [pc, #376]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00a      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026c8:	4b59      	ldr	r3, [pc, #356]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ce:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	4956      	ldr	r1, [pc, #344]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d00a      	beq.n	8002700 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026ea:	4b51      	ldr	r3, [pc, #324]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f8:	494d      	ldr	r1, [pc, #308]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d00a      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800270c:	4b48      	ldr	r3, [pc, #288]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002712:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	4945      	ldr	r1, [pc, #276]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800271c:	4313      	orrs	r3, r2
 800271e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800272e:	4b40      	ldr	r3, [pc, #256]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002730:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002734:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800273c:	493c      	ldr	r1, [pc, #240]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800273e:	4313      	orrs	r3, r2
 8002740:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d00a      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002750:	4b37      	ldr	r3, [pc, #220]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800275e:	4934      	ldr	r1, [pc, #208]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002760:	4313      	orrs	r3, r2
 8002762:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800276e:	2b00      	cmp	r3, #0
 8002770:	d011      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002772:	4b2f      	ldr	r3, [pc, #188]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002774:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002778:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002780:	492b      	ldr	r1, [pc, #172]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002782:	4313      	orrs	r3, r2
 8002784:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800278c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002790:	d101      	bne.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002792:	2301      	movs	r3, #1
 8002794:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0308 	and.w	r3, r3, #8
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d001      	beq.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027a2:	2301      	movs	r3, #1
 80027a4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027b2:	4b1f      	ldr	r3, [pc, #124]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027c0:	491b      	ldr	r1, [pc, #108]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027d4:	4b16      	ldr	r3, [pc, #88]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027da:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027e4:	4912      	ldr	r1, [pc, #72]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00b      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80027f8:	4b0d      	ldr	r3, [pc, #52]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027fe:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002808:	4909      	ldr	r1, [pc, #36]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280a:	4313      	orrs	r3, r2
 800280c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002818:	2b00      	cmp	r3, #0
 800281a:	d00f      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800281c:	4b04      	ldr	r3, [pc, #16]	; (8002830 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800281e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002822:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800282c:	e002      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800282e:	bf00      	nop
 8002830:	40023800 	.word	0x40023800
 8002834:	4985      	ldr	r1, [pc, #532]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002848:	4b80      	ldr	r3, [pc, #512]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800284a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800284e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002858:	497c      	ldr	r1, [pc, #496]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d005      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800286e:	f040 80d6 	bne.w	8002a1e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002872:	4b76      	ldr	r3, [pc, #472]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a75      	ldr	r2, [pc, #468]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002878:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800287c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800287e:	f7fd fead 	bl	80005dc <HAL_GetTick>
 8002882:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002884:	e008      	b.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002886:	f7fd fea9 	bl	80005dc <HAL_GetTick>
 800288a:	4602      	mov	r2, r0
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	2b64      	cmp	r3, #100	; 0x64
 8002892:	d901      	bls.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e194      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002898:	4b6c      	ldr	r3, [pc, #432]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d1f0      	bne.n	8002886 <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d021      	beq.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11d      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028b8:	4b64      	ldr	r3, [pc, #400]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028be:	0c1b      	lsrs	r3, r3, #16
 80028c0:	f003 0303 	and.w	r3, r3, #3
 80028c4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028c6:	4b61      	ldr	r3, [pc, #388]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028cc:	0e1b      	lsrs	r3, r3, #24
 80028ce:	f003 030f 	and.w	r3, r3, #15
 80028d2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	019a      	lsls	r2, r3, #6
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	041b      	lsls	r3, r3, #16
 80028de:	431a      	orrs	r2, r3
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	061b      	lsls	r3, r3, #24
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	071b      	lsls	r3, r3, #28
 80028ec:	4957      	ldr	r1, [pc, #348]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80028ee:	4313      	orrs	r3, r2
 80028f0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d004      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x586>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002908:	d00a      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002912:	2b00      	cmp	r3, #0
 8002914:	d02e      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800291e:	d129      	bne.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002920:	4b4a      	ldr	r3, [pc, #296]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002922:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002926:	0c1b      	lsrs	r3, r3, #16
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800292e:	4b47      	ldr	r3, [pc, #284]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002930:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002934:	0f1b      	lsrs	r3, r3, #28
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	019a      	lsls	r2, r3, #6
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	041b      	lsls	r3, r3, #16
 8002946:	431a      	orrs	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	061b      	lsls	r3, r3, #24
 800294e:	431a      	orrs	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	071b      	lsls	r3, r3, #28
 8002954:	493d      	ldr	r1, [pc, #244]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002956:	4313      	orrs	r3, r2
 8002958:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800295c:	4b3b      	ldr	r3, [pc, #236]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800295e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002962:	f023 021f 	bic.w	r2, r3, #31
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	3b01      	subs	r3, #1
 800296c:	4937      	ldr	r1, [pc, #220]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800296e:	4313      	orrs	r3, r2
 8002970:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01d      	beq.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002980:	4b32      	ldr	r3, [pc, #200]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002982:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002986:	0e1b      	lsrs	r3, r3, #24
 8002988:	f003 030f 	and.w	r3, r3, #15
 800298c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002994:	0f1b      	lsrs	r3, r3, #28
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	019a      	lsls	r2, r3, #6
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	431a      	orrs	r2, r3
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	061b      	lsls	r3, r3, #24
 80029ae:	431a      	orrs	r2, r3
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	071b      	lsls	r3, r3, #28
 80029b4:	4925      	ldr	r1, [pc, #148]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d011      	beq.n	80029ec <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	019a      	lsls	r2, r3, #6
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	691b      	ldr	r3, [r3, #16]
 80029d2:	041b      	lsls	r3, r3, #16
 80029d4:	431a      	orrs	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68db      	ldr	r3, [r3, #12]
 80029da:	061b      	lsls	r3, r3, #24
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	071b      	lsls	r3, r3, #28
 80029e4:	4919      	ldr	r1, [pc, #100]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80029ec:	4b17      	ldr	r3, [pc, #92]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a16      	ldr	r2, [pc, #88]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 80029f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f8:	f7fd fdf0 	bl	80005dc <HAL_GetTick>
 80029fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80029fe:	e008      	b.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a00:	f7fd fdec 	bl	80005dc <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b64      	cmp	r3, #100	; 0x64
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e0d7      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a12:	4b0e      	ldr	r3, [pc, #56]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0f0      	beq.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	f040 80cd 	bne.w	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a26:	4b09      	ldr	r3, [pc, #36]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a08      	ldr	r2, [pc, #32]	; (8002a4c <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8002a2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a32:	f7fd fdd3 	bl	80005dc <HAL_GetTick>
 8002a36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a38:	e00a      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a3a:	f7fd fdcf 	bl	80005dc <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d903      	bls.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e0ba      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8002a4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a50:	4b5e      	ldr	r3, [pc, #376]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a5c:	d0ed      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d003      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d02e      	beq.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d12a      	bne.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a86:	4b51      	ldr	r3, [pc, #324]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	f003 0303 	and.w	r3, r3, #3
 8002a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002a94:	4b4d      	ldr	r3, [pc, #308]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9a:	0f1b      	lsrs	r3, r3, #28
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	019a      	lsls	r2, r3, #6
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	431a      	orrs	r2, r3
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	061b      	lsls	r3, r3, #24
 8002ab4:	431a      	orrs	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	071b      	lsls	r3, r3, #28
 8002aba:	4944      	ldr	r1, [pc, #272]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002abc:	4313      	orrs	r3, r2
 8002abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ac2:	4b42      	ldr	r3, [pc, #264]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ac8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	021b      	lsls	r3, r3, #8
 8002ad4:	493d      	ldr	r1, [pc, #244]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d022      	beq.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002af0:	d11d      	bne.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002af2:	4b36      	ldr	r3, [pc, #216]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	0e1b      	lsrs	r3, r3, #24
 8002afa:	f003 030f 	and.w	r3, r3, #15
 8002afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b00:	4b32      	ldr	r3, [pc, #200]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	0f1b      	lsrs	r3, r3, #28
 8002b08:	f003 0307 	and.w	r3, r3, #7
 8002b0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	695b      	ldr	r3, [r3, #20]
 8002b12:	019a      	lsls	r2, r3, #6
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6a1b      	ldr	r3, [r3, #32]
 8002b18:	041b      	lsls	r3, r3, #16
 8002b1a:	431a      	orrs	r2, r3
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	061b      	lsls	r3, r3, #24
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	071b      	lsls	r3, r3, #28
 8002b26:	4929      	ldr	r1, [pc, #164]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b28:	4313      	orrs	r3, r2
 8002b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 0308 	and.w	r3, r3, #8
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d028      	beq.n	8002b8c <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b3a:	4b24      	ldr	r3, [pc, #144]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b40:	0e1b      	lsrs	r3, r3, #24
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b48:	4b20      	ldr	r3, [pc, #128]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	0c1b      	lsrs	r3, r3, #16
 8002b50:	f003 0303 	and.w	r3, r3, #3
 8002b54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	019a      	lsls	r2, r3, #6
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	041b      	lsls	r3, r3, #16
 8002b60:	431a      	orrs	r2, r3
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	061b      	lsls	r3, r3, #24
 8002b66:	431a      	orrs	r2, r3
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	69db      	ldr	r3, [r3, #28]
 8002b6c:	071b      	lsls	r3, r3, #28
 8002b6e:	4917      	ldr	r1, [pc, #92]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b70:	4313      	orrs	r3, r2
 8002b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b76:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b84:	4911      	ldr	r1, [pc, #68]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b86:	4313      	orrs	r3, r2
 8002b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a0e      	ldr	r2, [pc, #56]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b98:	f7fd fd20 	bl	80005dc <HAL_GetTick>
 8002b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002b9e:	e008      	b.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002ba0:	f7fd fd1c 	bl	80005dc <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	2b64      	cmp	r3, #100	; 0x64
 8002bac:	d901      	bls.n	8002bb2 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bae:	2303      	movs	r3, #3
 8002bb0:	e007      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bb2:	4b06      	ldr	r3, [pc, #24]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bbe:	d1ef      	bne.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	3720      	adds	r7, #32
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800

08002bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e01d      	b.n	8002c1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f001 ff9e 	bl	8004b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	4610      	mov	r0, r2
 8002c10:	f000 faf2 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
	...

08002c28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b085      	sub	sp, #20
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	4b0c      	ldr	r3, [pc, #48]	; (8002c78 <HAL_TIM_Base_Start_IT+0x50>)
 8002c48:	4013      	ands	r3, r2
 8002c4a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	2b06      	cmp	r3, #6
 8002c50:	d00b      	beq.n	8002c6a <HAL_TIM_Base_Start_IT+0x42>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d007      	beq.n	8002c6a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	00010007 	.word	0x00010007

08002c7c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e01d      	b.n	8002cca <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d106      	bne.n	8002ca8 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8002ca2:	6878      	ldr	r0, [r7, #4]
 8002ca4:	f000 f815 	bl	8002cd2 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2202      	movs	r2, #2
 8002cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4610      	mov	r0, r2
 8002cbc:	f000 fa9c 	bl	80031f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	b083      	sub	sp, #12
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8002cda:	bf00      	nop
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce4:	4770      	bx	lr

08002ce6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b082      	sub	sp, #8
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691b      	ldr	r3, [r3, #16]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d122      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d11b      	bne.n	8002d42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f06f 0202 	mvn.w	r2, #2
 8002d12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d003      	beq.n	8002d30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	f000 fa47 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002d2e:	e005      	b.n	8002d3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 fa39 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 fa4a 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	f003 0304 	and.w	r3, r3, #4
 8002d4c:	2b04      	cmp	r3, #4
 8002d4e:	d122      	bne.n	8002d96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	f003 0304 	and.w	r3, r3, #4
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d11b      	bne.n	8002d96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f06f 0204 	mvn.w	r2, #4
 8002d66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2202      	movs	r2, #2
 8002d6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fa1d 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002d82:	e005      	b.n	8002d90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f000 fa0f 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 fa20 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2200      	movs	r2, #0
 8002d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	f003 0308 	and.w	r3, r3, #8
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d122      	bne.n	8002dea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b08      	cmp	r3, #8
 8002db0:	d11b      	bne.n	8002dea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0208 	mvn.w	r2, #8
 8002dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2204      	movs	r2, #4
 8002dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69db      	ldr	r3, [r3, #28]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d003      	beq.n	8002dd8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dd0:	6878      	ldr	r0, [r7, #4]
 8002dd2:	f000 f9f3 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002dd6:	e005      	b.n	8002de4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f000 f9e5 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9f6 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	f003 0310 	and.w	r3, r3, #16
 8002df4:	2b10      	cmp	r3, #16
 8002df6:	d122      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f003 0310 	and.w	r3, r3, #16
 8002e02:	2b10      	cmp	r3, #16
 8002e04:	d11b      	bne.n	8002e3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f06f 0210 	mvn.w	r2, #16
 8002e0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2208      	movs	r2, #8
 8002e14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d003      	beq.n	8002e2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f9c9 	bl	80031bc <HAL_TIM_IC_CaptureCallback>
 8002e2a:	e005      	b.n	8002e38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f9bb 	bl	80031a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f9cc 	bl	80031d0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	691b      	ldr	r3, [r3, #16]
 8002e44:	f003 0301 	and.w	r3, r3, #1
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d10e      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d107      	bne.n	8002e6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f06f 0201 	mvn.w	r2, #1
 8002e62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f995 	bl	8003194 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e74:	2b80      	cmp	r3, #128	; 0x80
 8002e76:	d10e      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e82:	2b80      	cmp	r3, #128	; 0x80
 8002e84:	d107      	bne.n	8002e96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 fdaf 	bl	80039f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea4:	d10e      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b80      	cmp	r3, #128	; 0x80
 8002eb2:	d107      	bne.n	8002ec4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fda2 	bl	8003a08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ece:	2b40      	cmp	r3, #64	; 0x40
 8002ed0:	d10e      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b40      	cmp	r3, #64	; 0x40
 8002ede:	d107      	bne.n	8002ef0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 f97a 	bl	80031e4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	691b      	ldr	r3, [r3, #16]
 8002ef6:	f003 0320 	and.w	r3, r3, #32
 8002efa:	2b20      	cmp	r3, #32
 8002efc:	d10e      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	f003 0320 	and.w	r3, r3, #32
 8002f08:	2b20      	cmp	r3, #32
 8002f0a:	d107      	bne.n	8002f1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f06f 0220 	mvn.w	r2, #32
 8002f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fd62 	bl	80039e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002f1c:	bf00      	nop
 8002f1e:	3708      	adds	r7, #8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}

08002f24 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_TIM_OC_ConfigChannel+0x1a>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e06c      	b.n	8003018 <HAL_TIM_OC_ConfigChannel+0xf4>
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2202      	movs	r2, #2
 8002f4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2b14      	cmp	r3, #20
 8002f52:	d857      	bhi.n	8003004 <HAL_TIM_OC_ConfigChannel+0xe0>
 8002f54:	a201      	add	r2, pc, #4	; (adr r2, 8002f5c <HAL_TIM_OC_ConfigChannel+0x38>)
 8002f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f5a:	bf00      	nop
 8002f5c:	08002fb1 	.word	0x08002fb1
 8002f60:	08003005 	.word	0x08003005
 8002f64:	08003005 	.word	0x08003005
 8002f68:	08003005 	.word	0x08003005
 8002f6c:	08002fbf 	.word	0x08002fbf
 8002f70:	08003005 	.word	0x08003005
 8002f74:	08003005 	.word	0x08003005
 8002f78:	08003005 	.word	0x08003005
 8002f7c:	08002fcd 	.word	0x08002fcd
 8002f80:	08003005 	.word	0x08003005
 8002f84:	08003005 	.word	0x08003005
 8002f88:	08003005 	.word	0x08003005
 8002f8c:	08002fdb 	.word	0x08002fdb
 8002f90:	08003005 	.word	0x08003005
 8002f94:	08003005 	.word	0x08003005
 8002f98:	08003005 	.word	0x08003005
 8002f9c:	08002fe9 	.word	0x08002fe9
 8002fa0:	08003005 	.word	0x08003005
 8002fa4:	08003005 	.word	0x08003005
 8002fa8:	08003005 	.word	0x08003005
 8002fac:	08002ff7 	.word	0x08002ff7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f9be 	bl	8003338 <TIM_OC1_SetConfig>
      break;
 8002fbc:	e023      	b.n	8003006 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68b9      	ldr	r1, [r7, #8]
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fa29 	bl	800341c <TIM_OC2_SetConfig>
      break;
 8002fca:	e01c      	b.n	8003006 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fa9a 	bl	800350c <TIM_OC3_SetConfig>
      break;
 8002fd8:	e015      	b.n	8003006 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	68b9      	ldr	r1, [r7, #8]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f000 fb09 	bl	80035f8 <TIM_OC4_SetConfig>
      break;
 8002fe6:	e00e      	b.n	8003006 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68b9      	ldr	r1, [r7, #8]
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f000 fb5a 	bl	80036a8 <TIM_OC5_SetConfig>
      break;
 8002ff4:	e007      	b.n	8003006 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	68b9      	ldr	r1, [r7, #8]
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f000 fba5 	bl	800374c <TIM_OC6_SetConfig>
      break;
 8003002:	e000      	b.n	8003006 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      break;
 8003004:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_TIM_ConfigClockSource+0x18>
 8003034:	2302      	movs	r3, #2
 8003036:	e0a6      	b.n	8003186 <HAL_TIM_ConfigClockSource+0x166>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003050:	68fa      	ldr	r2, [r7, #12]
 8003052:	4b4f      	ldr	r3, [pc, #316]	; (8003190 <HAL_TIM_ConfigClockSource+0x170>)
 8003054:	4013      	ands	r3, r2
 8003056:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800305e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b40      	cmp	r3, #64	; 0x40
 800306e:	d067      	beq.n	8003140 <HAL_TIM_ConfigClockSource+0x120>
 8003070:	2b40      	cmp	r3, #64	; 0x40
 8003072:	d80b      	bhi.n	800308c <HAL_TIM_ConfigClockSource+0x6c>
 8003074:	2b10      	cmp	r3, #16
 8003076:	d073      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
 8003078:	2b10      	cmp	r3, #16
 800307a:	d802      	bhi.n	8003082 <HAL_TIM_ConfigClockSource+0x62>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d06f      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003080:	e078      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003082:	2b20      	cmp	r3, #32
 8003084:	d06c      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
 8003086:	2b30      	cmp	r3, #48	; 0x30
 8003088:	d06a      	beq.n	8003160 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800308a:	e073      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800308c:	2b70      	cmp	r3, #112	; 0x70
 800308e:	d00d      	beq.n	80030ac <HAL_TIM_ConfigClockSource+0x8c>
 8003090:	2b70      	cmp	r3, #112	; 0x70
 8003092:	d804      	bhi.n	800309e <HAL_TIM_ConfigClockSource+0x7e>
 8003094:	2b50      	cmp	r3, #80	; 0x50
 8003096:	d033      	beq.n	8003100 <HAL_TIM_ConfigClockSource+0xe0>
 8003098:	2b60      	cmp	r3, #96	; 0x60
 800309a:	d041      	beq.n	8003120 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800309c:	e06a      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800309e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a2:	d066      	beq.n	8003172 <HAL_TIM_ConfigClockSource+0x152>
 80030a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a8:	d017      	beq.n	80030da <HAL_TIM_ConfigClockSource+0xba>
      break;
 80030aa:	e063      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6818      	ldr	r0, [r3, #0]
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	f000 fc14 	bl	80038e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030ce:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	609a      	str	r2, [r3, #8]
      break;
 80030d8:	e04c      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	6899      	ldr	r1, [r3, #8]
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f000 fbfd 	bl	80038e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	689a      	ldr	r2, [r3, #8]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030fc:	609a      	str	r2, [r3, #8]
      break;
 80030fe:	e039      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6818      	ldr	r0, [r3, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	461a      	mov	r2, r3
 800310e:	f000 fb71 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2150      	movs	r1, #80	; 0x50
 8003118:	4618      	mov	r0, r3
 800311a:	f000 fbca 	bl	80038b2 <TIM_ITRx_SetConfig>
      break;
 800311e:	e029      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6818      	ldr	r0, [r3, #0]
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	68db      	ldr	r3, [r3, #12]
 800312c:	461a      	mov	r2, r3
 800312e:	f000 fb90 	bl	8003852 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2160      	movs	r1, #96	; 0x60
 8003138:	4618      	mov	r0, r3
 800313a:	f000 fbba 	bl	80038b2 <TIM_ITRx_SetConfig>
      break;
 800313e:	e019      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6818      	ldr	r0, [r3, #0]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	6859      	ldr	r1, [r3, #4]
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	68db      	ldr	r3, [r3, #12]
 800314c:	461a      	mov	r2, r3
 800314e:	f000 fb51 	bl	80037f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2140      	movs	r1, #64	; 0x40
 8003158:	4618      	mov	r0, r3
 800315a:	f000 fbaa 	bl	80038b2 <TIM_ITRx_SetConfig>
      break;
 800315e:	e009      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681a      	ldr	r2, [r3, #0]
 8003164:	683b      	ldr	r3, [r7, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4619      	mov	r1, r3
 800316a:	4610      	mov	r0, r2
 800316c:	f000 fba1 	bl	80038b2 <TIM_ITRx_SetConfig>
      break;
 8003170:	e000      	b.n	8003174 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003172:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	fffeff88 	.word	0xfffeff88

08003194 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800319c:	bf00      	nop
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031b0:	bf00      	nop
 80031b2:	370c      	adds	r7, #12
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80031bc:	b480      	push	{r7}
 80031be:	b083      	sub	sp, #12
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b083      	sub	sp, #12
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80031d8:	bf00      	nop
 80031da:	370c      	adds	r7, #12
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr

080031e4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b083      	sub	sp, #12
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80031ec:	bf00      	nop
 80031ee:	370c      	adds	r7, #12
 80031f0:	46bd      	mov	sp, r7
 80031f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f6:	4770      	bx	lr

080031f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b085      	sub	sp, #20
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
 8003200:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	4a40      	ldr	r2, [pc, #256]	; (800330c <TIM_Base_SetConfig+0x114>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d013      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003216:	d00f      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a3d      	ldr	r2, [pc, #244]	; (8003310 <TIM_Base_SetConfig+0x118>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d00b      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	4a3c      	ldr	r2, [pc, #240]	; (8003314 <TIM_Base_SetConfig+0x11c>)
 8003224:	4293      	cmp	r3, r2
 8003226:	d007      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	4a3b      	ldr	r2, [pc, #236]	; (8003318 <TIM_Base_SetConfig+0x120>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d003      	beq.n	8003238 <TIM_Base_SetConfig+0x40>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a3a      	ldr	r2, [pc, #232]	; (800331c <TIM_Base_SetConfig+0x124>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d108      	bne.n	800324a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800323e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a2f      	ldr	r2, [pc, #188]	; (800330c <TIM_Base_SetConfig+0x114>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d02b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003258:	d027      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	4a2c      	ldr	r2, [pc, #176]	; (8003310 <TIM_Base_SetConfig+0x118>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d023      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	4a2b      	ldr	r2, [pc, #172]	; (8003314 <TIM_Base_SetConfig+0x11c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d01f      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	4a2a      	ldr	r2, [pc, #168]	; (8003318 <TIM_Base_SetConfig+0x120>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d01b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <TIM_Base_SetConfig+0x124>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d017      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <TIM_Base_SetConfig+0x128>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d013      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a27      	ldr	r2, [pc, #156]	; (8003324 <TIM_Base_SetConfig+0x12c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d00f      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4a26      	ldr	r2, [pc, #152]	; (8003328 <TIM_Base_SetConfig+0x130>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d00b      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4a25      	ldr	r2, [pc, #148]	; (800332c <TIM_Base_SetConfig+0x134>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d007      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	4a24      	ldr	r2, [pc, #144]	; (8003330 <TIM_Base_SetConfig+0x138>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d003      	beq.n	80032aa <TIM_Base_SetConfig+0xb2>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	4a23      	ldr	r2, [pc, #140]	; (8003334 <TIM_Base_SetConfig+0x13c>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d108      	bne.n	80032bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	695b      	ldr	r3, [r3, #20]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	68fa      	ldr	r2, [r7, #12]
 80032ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	689a      	ldr	r2, [r3, #8]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	681a      	ldr	r2, [r3, #0]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a0a      	ldr	r2, [pc, #40]	; (800330c <TIM_Base_SetConfig+0x114>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d003      	beq.n	80032f0 <TIM_Base_SetConfig+0xf8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	4a0c      	ldr	r2, [pc, #48]	; (800331c <TIM_Base_SetConfig+0x124>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d103      	bne.n	80032f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	691a      	ldr	r2, [r3, #16]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	615a      	str	r2, [r3, #20]
}
 80032fe:	bf00      	nop
 8003300:	3714      	adds	r7, #20
 8003302:	46bd      	mov	sp, r7
 8003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003308:	4770      	bx	lr
 800330a:	bf00      	nop
 800330c:	40010000 	.word	0x40010000
 8003310:	40000400 	.word	0x40000400
 8003314:	40000800 	.word	0x40000800
 8003318:	40000c00 	.word	0x40000c00
 800331c:	40010400 	.word	0x40010400
 8003320:	40014000 	.word	0x40014000
 8003324:	40014400 	.word	0x40014400
 8003328:	40014800 	.word	0x40014800
 800332c:	40001800 	.word	0x40001800
 8003330:	40001c00 	.word	0x40001c00
 8003334:	40002000 	.word	0x40002000

08003338 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003338:	b480      	push	{r7}
 800333a:	b087      	sub	sp, #28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	f023 0201 	bic.w	r2, r3, #1
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6a1b      	ldr	r3, [r3, #32]
 8003352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003360:	68fa      	ldr	r2, [r7, #12]
 8003362:	4b2b      	ldr	r3, [pc, #172]	; (8003410 <TIM_OC1_SetConfig+0xd8>)
 8003364:	4013      	ands	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 0303 	bic.w	r3, r3, #3
 800336e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4313      	orrs	r3, r2
 8003378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	f023 0302 	bic.w	r3, r3, #2
 8003380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	697a      	ldr	r2, [r7, #20]
 8003388:	4313      	orrs	r3, r2
 800338a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a21      	ldr	r2, [pc, #132]	; (8003414 <TIM_OC1_SetConfig+0xdc>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d003      	beq.n	800339c <TIM_OC1_SetConfig+0x64>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a20      	ldr	r2, [pc, #128]	; (8003418 <TIM_OC1_SetConfig+0xe0>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d10c      	bne.n	80033b6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0308 	bic.w	r3, r3, #8
 80033a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f023 0304 	bic.w	r3, r3, #4
 80033b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	4a16      	ldr	r2, [pc, #88]	; (8003414 <TIM_OC1_SetConfig+0xdc>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d003      	beq.n	80033c6 <TIM_OC1_SetConfig+0x8e>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	4a15      	ldr	r2, [pc, #84]	; (8003418 <TIM_OC1_SetConfig+0xe0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d111      	bne.n	80033ea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80033c6:	693b      	ldr	r3, [r7, #16]
 80033c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	693a      	ldr	r2, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	699b      	ldr	r3, [r3, #24]
 80033e4:	693a      	ldr	r2, [r7, #16]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	693a      	ldr	r2, [r7, #16]
 80033ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	697a      	ldr	r2, [r7, #20]
 8003402:	621a      	str	r2, [r3, #32]
}
 8003404:	bf00      	nop
 8003406:	371c      	adds	r7, #28
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr
 8003410:	fffeff8f 	.word	0xfffeff8f
 8003414:	40010000 	.word	0x40010000
 8003418:	40010400 	.word	0x40010400

0800341c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800341c:	b480      	push	{r7}
 800341e:	b087      	sub	sp, #28
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	f023 0210 	bic.w	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003444:	68fa      	ldr	r2, [r7, #12]
 8003446:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <TIM_OC2_SetConfig+0xe4>)
 8003448:	4013      	ands	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003452:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	f023 0320 	bic.w	r3, r3, #32
 8003466:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	4313      	orrs	r3, r2
 8003472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	4a23      	ldr	r2, [pc, #140]	; (8003504 <TIM_OC2_SetConfig+0xe8>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d003      	beq.n	8003484 <TIM_OC2_SetConfig+0x68>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a22      	ldr	r2, [pc, #136]	; (8003508 <TIM_OC2_SetConfig+0xec>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d10d      	bne.n	80034a0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800348a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	68db      	ldr	r3, [r3, #12]
 8003490:	011b      	lsls	r3, r3, #4
 8003492:	697a      	ldr	r2, [r7, #20]
 8003494:	4313      	orrs	r3, r2
 8003496:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800349e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <TIM_OC2_SetConfig+0xe8>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d003      	beq.n	80034b0 <TIM_OC2_SetConfig+0x94>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a17      	ldr	r2, [pc, #92]	; (8003508 <TIM_OC2_SetConfig+0xec>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d113      	bne.n	80034d8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034b0:	693b      	ldr	r3, [r7, #16]
 80034b2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034b6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034be:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	693a      	ldr	r2, [r7, #16]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	699b      	ldr	r3, [r3, #24]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	693a      	ldr	r2, [r7, #16]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	693a      	ldr	r2, [r7, #16]
 80034dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	621a      	str	r2, [r3, #32]
}
 80034f2:	bf00      	nop
 80034f4:	371c      	adds	r7, #28
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
 80034fe:	bf00      	nop
 8003500:	feff8fff 	.word	0xfeff8fff
 8003504:	40010000 	.word	0x40010000
 8003508:	40010400 	.word	0x40010400

0800350c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800350c:	b480      	push	{r7}
 800350e:	b087      	sub	sp, #28
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a1b      	ldr	r3, [r3, #32]
 8003526:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	69db      	ldr	r3, [r3, #28]
 8003532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	4b2d      	ldr	r3, [pc, #180]	; (80035ec <TIM_OC3_SetConfig+0xe0>)
 8003538:	4013      	ands	r3, r2
 800353a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	f023 0303 	bic.w	r3, r3, #3
 8003542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	4313      	orrs	r3, r2
 800354c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	021b      	lsls	r3, r3, #8
 800355c:	697a      	ldr	r2, [r7, #20]
 800355e:	4313      	orrs	r3, r2
 8003560:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a22      	ldr	r2, [pc, #136]	; (80035f0 <TIM_OC3_SetConfig+0xe4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d003      	beq.n	8003572 <TIM_OC3_SetConfig+0x66>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a21      	ldr	r2, [pc, #132]	; (80035f4 <TIM_OC3_SetConfig+0xe8>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d10d      	bne.n	800358e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003578:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	021b      	lsls	r3, r3, #8
 8003580:	697a      	ldr	r2, [r7, #20]
 8003582:	4313      	orrs	r3, r2
 8003584:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800358c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <TIM_OC3_SetConfig+0xe4>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d003      	beq.n	800359e <TIM_OC3_SetConfig+0x92>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a16      	ldr	r2, [pc, #88]	; (80035f4 <TIM_OC3_SetConfig+0xe8>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d113      	bne.n	80035c6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	693a      	ldr	r2, [r7, #16]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	699b      	ldr	r3, [r3, #24]
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	693a      	ldr	r2, [r7, #16]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	693a      	ldr	r2, [r7, #16]
 80035ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	621a      	str	r2, [r3, #32]
}
 80035e0:	bf00      	nop
 80035e2:	371c      	adds	r7, #28
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	fffeff8f 	.word	0xfffeff8f
 80035f0:	40010000 	.word	0x40010000
 80035f4:	40010400 	.word	0x40010400

080035f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b087      	sub	sp, #28
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	69db      	ldr	r3, [r3, #28]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003620:	68fa      	ldr	r2, [r7, #12]
 8003622:	4b1e      	ldr	r3, [pc, #120]	; (800369c <TIM_OC4_SetConfig+0xa4>)
 8003624:	4013      	ands	r3, r2
 8003626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800362e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	021b      	lsls	r3, r3, #8
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	4313      	orrs	r3, r2
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003642:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	031b      	lsls	r3, r3, #12
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a13      	ldr	r2, [pc, #76]	; (80036a0 <TIM_OC4_SetConfig+0xa8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d003      	beq.n	8003660 <TIM_OC4_SetConfig+0x68>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	4a12      	ldr	r2, [pc, #72]	; (80036a4 <TIM_OC4_SetConfig+0xac>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d109      	bne.n	8003674 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003666:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	695b      	ldr	r3, [r3, #20]
 800366c:	019b      	lsls	r3, r3, #6
 800366e:	697a      	ldr	r2, [r7, #20]
 8003670:	4313      	orrs	r3, r2
 8003672:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	693a      	ldr	r2, [r7, #16]
 800368c:	621a      	str	r2, [r3, #32]
}
 800368e:	bf00      	nop
 8003690:	371c      	adds	r7, #28
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	feff8fff 	.word	0xfeff8fff
 80036a0:	40010000 	.word	0x40010000
 80036a4:	40010400 	.word	0x40010400

080036a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b087      	sub	sp, #28
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6a1b      	ldr	r3, [r3, #32]
 80036b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a1b      	ldr	r3, [r3, #32]
 80036c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4b1b      	ldr	r3, [pc, #108]	; (8003740 <TIM_OC5_SetConfig+0x98>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80036e8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	041b      	lsls	r3, r3, #16
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a12      	ldr	r2, [pc, #72]	; (8003744 <TIM_OC5_SetConfig+0x9c>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_OC5_SetConfig+0x5e>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a11      	ldr	r2, [pc, #68]	; (8003748 <TIM_OC5_SetConfig+0xa0>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d109      	bne.n	800371a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800370c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68fa      	ldr	r2, [r7, #12]
 8003724:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	621a      	str	r2, [r3, #32]
}
 8003734:	bf00      	nop
 8003736:	371c      	adds	r7, #28
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr
 8003740:	fffeff8f 	.word	0xfffeff8f
 8003744:	40010000 	.word	0x40010000
 8003748:	40010400 	.word	0x40010400

0800374c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800374c:	b480      	push	{r7}
 800374e:	b087      	sub	sp, #28
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a1b      	ldr	r3, [r3, #32]
 800375a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a1b      	ldr	r3, [r3, #32]
 8003766:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003772:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	4b1c      	ldr	r3, [pc, #112]	; (80037e8 <TIM_OC6_SetConfig+0x9c>)
 8003778:	4013      	ands	r3, r2
 800377a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	021b      	lsls	r3, r3, #8
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	4313      	orrs	r3, r2
 8003786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800378e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	051b      	lsls	r3, r3, #20
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	4313      	orrs	r3, r2
 800379a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	4a13      	ldr	r2, [pc, #76]	; (80037ec <TIM_OC6_SetConfig+0xa0>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d003      	beq.n	80037ac <TIM_OC6_SetConfig+0x60>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <TIM_OC6_SetConfig+0xa4>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d109      	bne.n	80037c0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	695b      	ldr	r3, [r3, #20]
 80037b8:	029b      	lsls	r3, r3, #10
 80037ba:	697a      	ldr	r2, [r7, #20]
 80037bc:	4313      	orrs	r3, r2
 80037be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	697a      	ldr	r2, [r7, #20]
 80037c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	693a      	ldr	r2, [r7, #16]
 80037d8:	621a      	str	r2, [r3, #32]
}
 80037da:	bf00      	nop
 80037dc:	371c      	adds	r7, #28
 80037de:	46bd      	mov	sp, r7
 80037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e4:	4770      	bx	lr
 80037e6:	bf00      	nop
 80037e8:	feff8fff 	.word	0xfeff8fff
 80037ec:	40010000 	.word	0x40010000
 80037f0:	40010400 	.word	0x40010400

080037f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a1b      	ldr	r3, [r3, #32]
 8003804:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	f023 0201 	bic.w	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800381e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	693a      	ldr	r2, [r7, #16]
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	f023 030a 	bic.w	r3, r3, #10
 8003830:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	4313      	orrs	r3, r2
 8003838:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	697a      	ldr	r2, [r7, #20]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003852:	b480      	push	{r7}
 8003854:	b087      	sub	sp, #28
 8003856:	af00      	add	r7, sp, #0
 8003858:	60f8      	str	r0, [r7, #12]
 800385a:	60b9      	str	r1, [r7, #8]
 800385c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6a1b      	ldr	r3, [r3, #32]
 8003862:	f023 0210 	bic.w	r2, r3, #16
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800387c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	031b      	lsls	r3, r3, #12
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800388e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	697a      	ldr	r2, [r7, #20]
 800389e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	621a      	str	r2, [r3, #32]
}
 80038a6:	bf00      	nop
 80038a8:	371c      	adds	r7, #28
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr

080038b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038b2:	b480      	push	{r7}
 80038b4:	b085      	sub	sp, #20
 80038b6:	af00      	add	r7, sp, #0
 80038b8:	6078      	str	r0, [r7, #4]
 80038ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038ca:	683a      	ldr	r2, [r7, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f043 0307 	orr.w	r3, r3, #7
 80038d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	609a      	str	r2, [r3, #8]
}
 80038dc:	bf00      	nop
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003902:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	021a      	lsls	r2, r3, #8
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	431a      	orrs	r2, r3
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	4313      	orrs	r3, r2
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	371c      	adds	r7, #28
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
 8003930:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003938:	2b01      	cmp	r3, #1
 800393a:	d101      	bne.n	8003940 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800393c:	2302      	movs	r3, #2
 800393e:	e045      	b.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2202      	movs	r2, #2
 800394c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a1c      	ldr	r2, [pc, #112]	; (80039d8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d004      	beq.n	8003974 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a1b      	ldr	r2, [pc, #108]	; (80039dc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d108      	bne.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800397a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	68fa      	ldr	r2, [r7, #12]
 8003982:	4313      	orrs	r3, r2
 8003984:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	68fa      	ldr	r2, [r7, #12]
 8003994:	4313      	orrs	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800399e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	68ba      	ldr	r2, [r7, #8]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	68ba      	ldr	r2, [r7, #8]
 80039b8:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039ca:	2300      	movs	r3, #0
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	3714      	adds	r7, #20
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40010400 	.word	0x40010400

080039e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d101      	bne.n	8003a2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e040      	b.n	8003ab0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f001 f8b4 	bl	8004bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2224      	movs	r2, #36	; 0x24
 8003a48:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0201 	bic.w	r2, r2, #1
 8003a58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f82c 	bl	8003ab8 <UART_SetConfig>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d101      	bne.n	8003a6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e022      	b.n	8003ab0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fac4 	bl	8004000 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	685a      	ldr	r2, [r3, #4]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a96:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f042 0201 	orr.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f000 fb4b 	bl	8004144 <UART_CheckIdleState>
 8003aae:	4603      	mov	r3, r0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3708      	adds	r7, #8
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b088      	sub	sp, #32
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	431a      	orrs	r2, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	695b      	ldr	r3, [r3, #20]
 8003ad6:	431a      	orrs	r2, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	69db      	ldr	r3, [r3, #28]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	4bb1      	ldr	r3, [pc, #708]	; (8003dac <UART_SetConfig+0x2f4>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	6812      	ldr	r2, [r2, #0]
 8003aee:	6939      	ldr	r1, [r7, #16]
 8003af0:	430b      	orrs	r3, r1
 8003af2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	699b      	ldr	r3, [r3, #24]
 8003b0e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a1b      	ldr	r3, [r3, #32]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	430a      	orrs	r2, r1
 8003b2c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a9f      	ldr	r2, [pc, #636]	; (8003db0 <UART_SetConfig+0x2f8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d121      	bne.n	8003b7c <UART_SetConfig+0xc4>
 8003b38:	4b9e      	ldr	r3, [pc, #632]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f003 0303 	and.w	r3, r3, #3
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d816      	bhi.n	8003b74 <UART_SetConfig+0xbc>
 8003b46:	a201      	add	r2, pc, #4	; (adr r2, 8003b4c <UART_SetConfig+0x94>)
 8003b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4c:	08003b5d 	.word	0x08003b5d
 8003b50:	08003b69 	.word	0x08003b69
 8003b54:	08003b63 	.word	0x08003b63
 8003b58:	08003b6f 	.word	0x08003b6f
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	77fb      	strb	r3, [r7, #31]
 8003b60:	e151      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003b62:	2302      	movs	r3, #2
 8003b64:	77fb      	strb	r3, [r7, #31]
 8003b66:	e14e      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003b68:	2304      	movs	r3, #4
 8003b6a:	77fb      	strb	r3, [r7, #31]
 8003b6c:	e14b      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003b6e:	2308      	movs	r3, #8
 8003b70:	77fb      	strb	r3, [r7, #31]
 8003b72:	e148      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003b74:	2310      	movs	r3, #16
 8003b76:	77fb      	strb	r3, [r7, #31]
 8003b78:	bf00      	nop
 8003b7a:	e144      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a8d      	ldr	r2, [pc, #564]	; (8003db8 <UART_SetConfig+0x300>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d134      	bne.n	8003bf0 <UART_SetConfig+0x138>
 8003b86:	4b8b      	ldr	r3, [pc, #556]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8c:	f003 030c 	and.w	r3, r3, #12
 8003b90:	2b0c      	cmp	r3, #12
 8003b92:	d829      	bhi.n	8003be8 <UART_SetConfig+0x130>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <UART_SetConfig+0xe4>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bd1 	.word	0x08003bd1
 8003ba0:	08003be9 	.word	0x08003be9
 8003ba4:	08003be9 	.word	0x08003be9
 8003ba8:	08003be9 	.word	0x08003be9
 8003bac:	08003bdd 	.word	0x08003bdd
 8003bb0:	08003be9 	.word	0x08003be9
 8003bb4:	08003be9 	.word	0x08003be9
 8003bb8:	08003be9 	.word	0x08003be9
 8003bbc:	08003bd7 	.word	0x08003bd7
 8003bc0:	08003be9 	.word	0x08003be9
 8003bc4:	08003be9 	.word	0x08003be9
 8003bc8:	08003be9 	.word	0x08003be9
 8003bcc:	08003be3 	.word	0x08003be3
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	77fb      	strb	r3, [r7, #31]
 8003bd4:	e117      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003bd6:	2302      	movs	r3, #2
 8003bd8:	77fb      	strb	r3, [r7, #31]
 8003bda:	e114      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003bdc:	2304      	movs	r3, #4
 8003bde:	77fb      	strb	r3, [r7, #31]
 8003be0:	e111      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003be2:	2308      	movs	r3, #8
 8003be4:	77fb      	strb	r3, [r7, #31]
 8003be6:	e10e      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003be8:	2310      	movs	r3, #16
 8003bea:	77fb      	strb	r3, [r7, #31]
 8003bec:	bf00      	nop
 8003bee:	e10a      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a71      	ldr	r2, [pc, #452]	; (8003dbc <UART_SetConfig+0x304>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d120      	bne.n	8003c3c <UART_SetConfig+0x184>
 8003bfa:	4b6e      	ldr	r3, [pc, #440]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003c04:	2b10      	cmp	r3, #16
 8003c06:	d00f      	beq.n	8003c28 <UART_SetConfig+0x170>
 8003c08:	2b10      	cmp	r3, #16
 8003c0a:	d802      	bhi.n	8003c12 <UART_SetConfig+0x15a>
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d005      	beq.n	8003c1c <UART_SetConfig+0x164>
 8003c10:	e010      	b.n	8003c34 <UART_SetConfig+0x17c>
 8003c12:	2b20      	cmp	r3, #32
 8003c14:	d005      	beq.n	8003c22 <UART_SetConfig+0x16a>
 8003c16:	2b30      	cmp	r3, #48	; 0x30
 8003c18:	d009      	beq.n	8003c2e <UART_SetConfig+0x176>
 8003c1a:	e00b      	b.n	8003c34 <UART_SetConfig+0x17c>
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	77fb      	strb	r3, [r7, #31]
 8003c20:	e0f1      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c22:	2302      	movs	r3, #2
 8003c24:	77fb      	strb	r3, [r7, #31]
 8003c26:	e0ee      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c28:	2304      	movs	r3, #4
 8003c2a:	77fb      	strb	r3, [r7, #31]
 8003c2c:	e0eb      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c2e:	2308      	movs	r3, #8
 8003c30:	77fb      	strb	r3, [r7, #31]
 8003c32:	e0e8      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c34:	2310      	movs	r3, #16
 8003c36:	77fb      	strb	r3, [r7, #31]
 8003c38:	bf00      	nop
 8003c3a:	e0e4      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5f      	ldr	r2, [pc, #380]	; (8003dc0 <UART_SetConfig+0x308>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d120      	bne.n	8003c88 <UART_SetConfig+0x1d0>
 8003c46:	4b5b      	ldr	r3, [pc, #364]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003c48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c50:	2b40      	cmp	r3, #64	; 0x40
 8003c52:	d00f      	beq.n	8003c74 <UART_SetConfig+0x1bc>
 8003c54:	2b40      	cmp	r3, #64	; 0x40
 8003c56:	d802      	bhi.n	8003c5e <UART_SetConfig+0x1a6>
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d005      	beq.n	8003c68 <UART_SetConfig+0x1b0>
 8003c5c:	e010      	b.n	8003c80 <UART_SetConfig+0x1c8>
 8003c5e:	2b80      	cmp	r3, #128	; 0x80
 8003c60:	d005      	beq.n	8003c6e <UART_SetConfig+0x1b6>
 8003c62:	2bc0      	cmp	r3, #192	; 0xc0
 8003c64:	d009      	beq.n	8003c7a <UART_SetConfig+0x1c2>
 8003c66:	e00b      	b.n	8003c80 <UART_SetConfig+0x1c8>
 8003c68:	2300      	movs	r3, #0
 8003c6a:	77fb      	strb	r3, [r7, #31]
 8003c6c:	e0cb      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	77fb      	strb	r3, [r7, #31]
 8003c72:	e0c8      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c74:	2304      	movs	r3, #4
 8003c76:	77fb      	strb	r3, [r7, #31]
 8003c78:	e0c5      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c7a:	2308      	movs	r3, #8
 8003c7c:	77fb      	strb	r3, [r7, #31]
 8003c7e:	e0c2      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c80:	2310      	movs	r3, #16
 8003c82:	77fb      	strb	r3, [r7, #31]
 8003c84:	bf00      	nop
 8003c86:	e0be      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a4d      	ldr	r2, [pc, #308]	; (8003dc4 <UART_SetConfig+0x30c>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d124      	bne.n	8003cdc <UART_SetConfig+0x224>
 8003c92:	4b48      	ldr	r3, [pc, #288]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca0:	d012      	beq.n	8003cc8 <UART_SetConfig+0x210>
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ca6:	d802      	bhi.n	8003cae <UART_SetConfig+0x1f6>
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d007      	beq.n	8003cbc <UART_SetConfig+0x204>
 8003cac:	e012      	b.n	8003cd4 <UART_SetConfig+0x21c>
 8003cae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003cb2:	d006      	beq.n	8003cc2 <UART_SetConfig+0x20a>
 8003cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cb8:	d009      	beq.n	8003cce <UART_SetConfig+0x216>
 8003cba:	e00b      	b.n	8003cd4 <UART_SetConfig+0x21c>
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	77fb      	strb	r3, [r7, #31]
 8003cc0:	e0a1      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003cc2:	2302      	movs	r3, #2
 8003cc4:	77fb      	strb	r3, [r7, #31]
 8003cc6:	e09e      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003cc8:	2304      	movs	r3, #4
 8003cca:	77fb      	strb	r3, [r7, #31]
 8003ccc:	e09b      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	77fb      	strb	r3, [r7, #31]
 8003cd2:	e098      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	77fb      	strb	r3, [r7, #31]
 8003cd8:	bf00      	nop
 8003cda:	e094      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a39      	ldr	r2, [pc, #228]	; (8003dc8 <UART_SetConfig+0x310>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d124      	bne.n	8003d30 <UART_SetConfig+0x278>
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003ce8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003cf0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cf4:	d012      	beq.n	8003d1c <UART_SetConfig+0x264>
 8003cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cfa:	d802      	bhi.n	8003d02 <UART_SetConfig+0x24a>
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d007      	beq.n	8003d10 <UART_SetConfig+0x258>
 8003d00:	e012      	b.n	8003d28 <UART_SetConfig+0x270>
 8003d02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d06:	d006      	beq.n	8003d16 <UART_SetConfig+0x25e>
 8003d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003d0c:	d009      	beq.n	8003d22 <UART_SetConfig+0x26a>
 8003d0e:	e00b      	b.n	8003d28 <UART_SetConfig+0x270>
 8003d10:	2301      	movs	r3, #1
 8003d12:	77fb      	strb	r3, [r7, #31]
 8003d14:	e077      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d16:	2302      	movs	r3, #2
 8003d18:	77fb      	strb	r3, [r7, #31]
 8003d1a:	e074      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d1c:	2304      	movs	r3, #4
 8003d1e:	77fb      	strb	r3, [r7, #31]
 8003d20:	e071      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d22:	2308      	movs	r3, #8
 8003d24:	77fb      	strb	r3, [r7, #31]
 8003d26:	e06e      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d28:	2310      	movs	r3, #16
 8003d2a:	77fb      	strb	r3, [r7, #31]
 8003d2c:	bf00      	nop
 8003d2e:	e06a      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a25      	ldr	r2, [pc, #148]	; (8003dcc <UART_SetConfig+0x314>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d124      	bne.n	8003d84 <UART_SetConfig+0x2cc>
 8003d3a:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d40:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003d44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d48:	d012      	beq.n	8003d70 <UART_SetConfig+0x2b8>
 8003d4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d4e:	d802      	bhi.n	8003d56 <UART_SetConfig+0x29e>
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d007      	beq.n	8003d64 <UART_SetConfig+0x2ac>
 8003d54:	e012      	b.n	8003d7c <UART_SetConfig+0x2c4>
 8003d56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5a:	d006      	beq.n	8003d6a <UART_SetConfig+0x2b2>
 8003d5c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003d60:	d009      	beq.n	8003d76 <UART_SetConfig+0x2be>
 8003d62:	e00b      	b.n	8003d7c <UART_SetConfig+0x2c4>
 8003d64:	2300      	movs	r3, #0
 8003d66:	77fb      	strb	r3, [r7, #31]
 8003d68:	e04d      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	77fb      	strb	r3, [r7, #31]
 8003d6e:	e04a      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d70:	2304      	movs	r3, #4
 8003d72:	77fb      	strb	r3, [r7, #31]
 8003d74:	e047      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d76:	2308      	movs	r3, #8
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e044      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	77fb      	strb	r3, [r7, #31]
 8003d80:	bf00      	nop
 8003d82:	e040      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a11      	ldr	r2, [pc, #68]	; (8003dd0 <UART_SetConfig+0x318>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d139      	bne.n	8003e02 <UART_SetConfig+0x34a>
 8003d8e:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <UART_SetConfig+0x2fc>)
 8003d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d94:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003d98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9c:	d027      	beq.n	8003dee <UART_SetConfig+0x336>
 8003d9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da2:	d817      	bhi.n	8003dd4 <UART_SetConfig+0x31c>
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01c      	beq.n	8003de2 <UART_SetConfig+0x32a>
 8003da8:	e027      	b.n	8003dfa <UART_SetConfig+0x342>
 8003daa:	bf00      	nop
 8003dac:	efff69f3 	.word	0xefff69f3
 8003db0:	40011000 	.word	0x40011000
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40004400 	.word	0x40004400
 8003dbc:	40004800 	.word	0x40004800
 8003dc0:	40004c00 	.word	0x40004c00
 8003dc4:	40005000 	.word	0x40005000
 8003dc8:	40011400 	.word	0x40011400
 8003dcc:	40007800 	.word	0x40007800
 8003dd0:	40007c00 	.word	0x40007c00
 8003dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd8:	d006      	beq.n	8003de8 <UART_SetConfig+0x330>
 8003dda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003dde:	d009      	beq.n	8003df4 <UART_SetConfig+0x33c>
 8003de0:	e00b      	b.n	8003dfa <UART_SetConfig+0x342>
 8003de2:	2300      	movs	r3, #0
 8003de4:	77fb      	strb	r3, [r7, #31]
 8003de6:	e00e      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003de8:	2302      	movs	r3, #2
 8003dea:	77fb      	strb	r3, [r7, #31]
 8003dec:	e00b      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003dee:	2304      	movs	r3, #4
 8003df0:	77fb      	strb	r3, [r7, #31]
 8003df2:	e008      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003df4:	2308      	movs	r3, #8
 8003df6:	77fb      	strb	r3, [r7, #31]
 8003df8:	e005      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003dfa:	2310      	movs	r3, #16
 8003dfc:	77fb      	strb	r3, [r7, #31]
 8003dfe:	bf00      	nop
 8003e00:	e001      	b.n	8003e06 <UART_SetConfig+0x34e>
 8003e02:	2310      	movs	r3, #16
 8003e04:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e0e:	d17c      	bne.n	8003f0a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 8003e10:	7ffb      	ldrb	r3, [r7, #31]
 8003e12:	2b08      	cmp	r3, #8
 8003e14:	d859      	bhi.n	8003eca <UART_SetConfig+0x412>
 8003e16:	a201      	add	r2, pc, #4	; (adr r2, 8003e1c <UART_SetConfig+0x364>)
 8003e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1c:	08003e41 	.word	0x08003e41
 8003e20:	08003e5f 	.word	0x08003e5f
 8003e24:	08003e7d 	.word	0x08003e7d
 8003e28:	08003ecb 	.word	0x08003ecb
 8003e2c:	08003e95 	.word	0x08003e95
 8003e30:	08003ecb 	.word	0x08003ecb
 8003e34:	08003ecb 	.word	0x08003ecb
 8003e38:	08003ecb 	.word	0x08003ecb
 8003e3c:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003e40:	f7fe fa78 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8003e44:	4603      	mov	r3, r0
 8003e46:	005a      	lsls	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	085b      	lsrs	r3, r3, #1
 8003e4e:	441a      	add	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	61bb      	str	r3, [r7, #24]
        break;
 8003e5c:	e038      	b.n	8003ed0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003e5e:	f7fe fa7d 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 8003e62:	4603      	mov	r3, r0
 8003e64:	005a      	lsls	r2, r3, #1
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	085b      	lsrs	r3, r3, #1
 8003e6c:	441a      	add	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	61bb      	str	r3, [r7, #24]
        break;
 8003e7a:	e029      	b.n	8003ed0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	085a      	lsrs	r2, r3, #1
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <UART_SetConfig+0x540>)
 8003e84:	4413      	add	r3, r2
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	6852      	ldr	r2, [r2, #4]
 8003e8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	61bb      	str	r3, [r7, #24]
        break;
 8003e92:	e01d      	b.n	8003ed0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003e94:	f7fe f990 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003e98:	4603      	mov	r3, r0
 8003e9a:	005a      	lsls	r2, r3, #1
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	085b      	lsrs	r3, r3, #1
 8003ea2:	441a      	add	r2, r3
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	b29b      	uxth	r3, r3
 8003eae:	61bb      	str	r3, [r7, #24]
        break;
 8003eb0:	e00e      	b.n	8003ed0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	085b      	lsrs	r3, r3, #1
 8003eb8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	61bb      	str	r3, [r7, #24]
        break;
 8003ec8:	e002      	b.n	8003ed0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	75fb      	strb	r3, [r7, #23]
        break;
 8003ece:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	2b0f      	cmp	r3, #15
 8003ed4:	d916      	bls.n	8003f04 <UART_SetConfig+0x44c>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d212      	bcs.n	8003f04 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ede:	69bb      	ldr	r3, [r7, #24]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f023 030f 	bic.w	r3, r3, #15
 8003ee6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	89fb      	ldrh	r3, [r7, #14]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	89fa      	ldrh	r2, [r7, #14]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	e06e      	b.n	8003fe2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	75fb      	strb	r3, [r7, #23]
 8003f08:	e06b      	b.n	8003fe2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 8003f0a:	7ffb      	ldrb	r3, [r7, #31]
 8003f0c:	2b08      	cmp	r3, #8
 8003f0e:	d857      	bhi.n	8003fc0 <UART_SetConfig+0x508>
 8003f10:	a201      	add	r2, pc, #4	; (adr r2, 8003f18 <UART_SetConfig+0x460>)
 8003f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f16:	bf00      	nop
 8003f18:	08003f3d 	.word	0x08003f3d
 8003f1c:	08003f59 	.word	0x08003f59
 8003f20:	08003f75 	.word	0x08003f75
 8003f24:	08003fc1 	.word	0x08003fc1
 8003f28:	08003f8d 	.word	0x08003f8d
 8003f2c:	08003fc1 	.word	0x08003fc1
 8003f30:	08003fc1 	.word	0x08003fc1
 8003f34:	08003fc1 	.word	0x08003fc1
 8003f38:	08003fa9 	.word	0x08003fa9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003f3c:	f7fe f9fa 	bl	8002334 <HAL_RCC_GetPCLK1Freq>
 8003f40:	4602      	mov	r2, r0
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	085b      	lsrs	r3, r3, #1
 8003f48:	441a      	add	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f52:	b29b      	uxth	r3, r3
 8003f54:	61bb      	str	r3, [r7, #24]
        break;
 8003f56:	e036      	b.n	8003fc6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003f58:	f7fe fa00 	bl	800235c <HAL_RCC_GetPCLK2Freq>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	085b      	lsrs	r3, r3, #1
 8003f64:	441a      	add	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	61bb      	str	r3, [r7, #24]
        break;
 8003f72:	e028      	b.n	8003fc6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	085a      	lsrs	r2, r3, #1
 8003f7a:	4b20      	ldr	r3, [pc, #128]	; (8003ffc <UART_SetConfig+0x544>)
 8003f7c:	4413      	add	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6852      	ldr	r2, [r2, #4]
 8003f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	61bb      	str	r3, [r7, #24]
        break;
 8003f8a:	e01c      	b.n	8003fc6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003f8c:	f7fe f914 	bl	80021b8 <HAL_RCC_GetSysClockFreq>
 8003f90:	4602      	mov	r2, r0
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	085b      	lsrs	r3, r3, #1
 8003f98:	441a      	add	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	61bb      	str	r3, [r7, #24]
        break;
 8003fa6:	e00e      	b.n	8003fc6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	085b      	lsrs	r3, r3, #1
 8003fae:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	61bb      	str	r3, [r7, #24]
        break;
 8003fbe:	e002      	b.n	8003fc6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	75fb      	strb	r3, [r7, #23]
        break;
 8003fc4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	2b0f      	cmp	r3, #15
 8003fca:	d908      	bls.n	8003fde <UART_SetConfig+0x526>
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd2:	d204      	bcs.n	8003fde <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	69ba      	ldr	r2, [r7, #24]
 8003fda:	60da      	str	r2, [r3, #12]
 8003fdc:	e001      	b.n	8003fe2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003fee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3720      	adds	r7, #32
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	01e84800 	.word	0x01e84800
 8003ffc:	00f42400 	.word	0x00f42400

08004000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004000:	b480      	push	{r7}
 8004002:	b083      	sub	sp, #12
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800400c:	f003 0301 	and.w	r3, r3, #1
 8004010:	2b00      	cmp	r3, #0
 8004012:	d00a      	beq.n	800402a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d00a      	beq.n	800404c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	f003 0304 	and.w	r3, r3, #4
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004072:	f003 0308 	and.w	r3, r3, #8
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00a      	beq.n	8004090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	430a      	orrs	r2, r1
 800408e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	f003 0310 	and.w	r3, r3, #16
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00a      	beq.n	80040b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	430a      	orrs	r2, r1
 80040b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00a      	beq.n	80040d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	430a      	orrs	r2, r1
 80040d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d01a      	beq.n	8004116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	430a      	orrs	r2, r1
 80040f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040fe:	d10a      	bne.n	8004116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	430a      	orrs	r2, r1
 8004114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00a      	beq.n	8004138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	430a      	orrs	r2, r1
 8004136:	605a      	str	r2, [r3, #4]
  }
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b086      	sub	sp, #24
 8004148:	af02      	add	r7, sp, #8
 800414a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004152:	f7fc fa43 	bl	80005dc <HAL_GetTick>
 8004156:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d10e      	bne.n	8004184 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004166:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	2200      	movs	r2, #0
 8004170:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f814 	bl	80041a2 <UART_WaitOnFlagUntilTimeout>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d001      	beq.n	8004184 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004180:	2303      	movs	r3, #3
 8004182:	e00a      	b.n	800419a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3710      	adds	r7, #16
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}

080041a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	603b      	str	r3, [r7, #0]
 80041ae:	4613      	mov	r3, r2
 80041b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b2:	e02a      	b.n	800420a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ba:	d026      	beq.n	800420a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041bc:	f7fc fa0e 	bl	80005dc <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	69ba      	ldr	r2, [r7, #24]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d302      	bcc.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x30>
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d11b      	bne.n	800420a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80041e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	2220      	movs	r2, #32
 80041fc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004206:	2303      	movs	r3, #3
 8004208:	e00f      	b.n	800422a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	69da      	ldr	r2, [r3, #28]
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4013      	ands	r3, r2
 8004214:	68ba      	ldr	r2, [r7, #8]
 8004216:	429a      	cmp	r2, r3
 8004218:	bf0c      	ite	eq
 800421a:	2301      	moveq	r3, #1
 800421c:	2300      	movne	r3, #0
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	79fb      	ldrb	r3, [r7, #7]
 8004224:	429a      	cmp	r2, r3
 8004226:	d0c5      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004228:	2300      	movs	r3, #0
}
 800422a:	4618      	mov	r0, r3
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}
	...

08004234 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004238:	f7fc f97e 	bl	8000538 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800423c:	f000 f820 	bl	8004280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004240:	f000 faac 	bl	800479c <MX_GPIO_Init>
  MX_DMA_Init();
 8004244:	f000 fa7c 	bl	8004740 <MX_DMA_Init>
  MX_ADC1_Init();
 8004248:	f000 f8aa 	bl	80043a0 <MX_ADC1_Init>
  MX_TIM4_Init();
 800424c:	f000 f99e 	bl	800458c <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8004250:	f000 fa46 	bl	80046e0 <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8004254:	f000 fa0e 	bl	8004674 <MX_TIM6_Init>
  MX_ADC2_Init();
 8004258:	f000 f8f4 	bl	8004444 <MX_ADC2_Init>
  MX_ADC3_Init();
 800425c:	f000 f944 	bl	80044e8 <MX_ADC3_Init>




  // HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&buffer[0],  ADC_BUFFER_LEN);
HAL_ADC_Start_DMA(&hadc2, (uint32_t*)&buffer2[0],  ADC_BUFFER_LEN);
 8004260:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004264:	4903      	ldr	r1, [pc, #12]	; (8004274 <main+0x40>)
 8004266:	4804      	ldr	r0, [pc, #16]	; (8004278 <main+0x44>)
 8004268:	f7fc fa08 	bl	800067c <HAL_ADC_Start_DMA>
 //HAL_ADC_Start_DMA(&hadc3, (uint32_t*)&buffer3[0],  ADC_BUFFER_LEN);
  HAL_TIM_Base_Start_IT(&htim6);
 800426c:	4803      	ldr	r0, [pc, #12]	; (800427c <main+0x48>)
 800426e:	f7fe fcdb 	bl	8002c28 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004272:	e7fe      	b.n	8004272 <main+0x3e>
 8004274:	200001e8 	.word	0x200001e8
 8004278:	200000f4 	.word	0x200000f4
 800427c:	20020290 	.word	0x20020290

08004280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b0b8      	sub	sp, #224	; 0xe0
 8004284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004286:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800428a:	2234      	movs	r2, #52	; 0x34
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f000 fdaa 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004294:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	605a      	str	r2, [r3, #4]
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	60da      	str	r2, [r3, #12]
 80042a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80042a4:	f107 0308 	add.w	r3, r7, #8
 80042a8:	2290      	movs	r2, #144	; 0x90
 80042aa:	2100      	movs	r1, #0
 80042ac:	4618      	mov	r0, r3
 80042ae:	f000 fd9b 	bl	8004de8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80042b2:	4b39      	ldr	r3, [pc, #228]	; (8004398 <SystemClock_Config+0x118>)
 80042b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042b6:	4a38      	ldr	r2, [pc, #224]	; (8004398 <SystemClock_Config+0x118>)
 80042b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042bc:	6413      	str	r3, [r2, #64]	; 0x40
 80042be:	4b36      	ldr	r3, [pc, #216]	; (8004398 <SystemClock_Config+0x118>)
 80042c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042c6:	607b      	str	r3, [r7, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80042ca:	4b34      	ldr	r3, [pc, #208]	; (800439c <SystemClock_Config+0x11c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a33      	ldr	r2, [pc, #204]	; (800439c <SystemClock_Config+0x11c>)
 80042d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b31      	ldr	r3, [pc, #196]	; (800439c <SystemClock_Config+0x11c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042de:	603b      	str	r3, [r7, #0]
 80042e0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80042e2:	2302      	movs	r3, #2
 80042e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80042e8:	2301      	movs	r3, #1
 80042ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80042ee:	2310      	movs	r3, #16
 80042f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80042f4:	2302      	movs	r3, #2
 80042f6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80042fa:	2300      	movs	r3, #0
 80042fc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 8;
 8004300:	2308      	movs	r3, #8
 8004302:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8004306:	23d8      	movs	r3, #216	; 0xd8
 8004308:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800430c:	2302      	movs	r3, #2
 800430e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004312:	2302      	movs	r3, #2
 8004314:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004318:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800431c:	4618      	mov	r0, r3
 800431e:	f7fd fbf1 	bl	8001b04 <HAL_RCC_OscConfig>
 8004322:	4603      	mov	r3, r0
 8004324:	2b00      	cmp	r3, #0
 8004326:	d001      	beq.n	800432c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8004328:	f000 faa2 	bl	8004870 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800432c:	f7fd fb9a 	bl	8001a64 <HAL_PWREx_EnableOverDrive>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8004336:	f000 fa9b 	bl	8004870 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800433a:	230f      	movs	r3, #15
 800433c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004340:	2302      	movs	r3, #2
 8004342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004346:	2300      	movs	r3, #0
 8004348:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800434c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8004350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8004354:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004358:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800435c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004360:	2107      	movs	r1, #7
 8004362:	4618      	mov	r0, r3
 8004364:	f7fd fe40 	bl	8001fe8 <HAL_RCC_ClockConfig>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800436e:	f000 fa7f 	bl	8004870 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8004372:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004376:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8004378:	2300      	movs	r3, #0
 800437a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800437c:	f107 0308 	add.w	r3, r7, #8
 8004380:	4618      	mov	r0, r3
 8004382:	f7fd ffff 	bl	8002384 <HAL_RCCEx_PeriphCLKConfig>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <SystemClock_Config+0x110>
  {
    Error_Handler();
 800438c:	f000 fa70 	bl	8004870 <Error_Handler>
  }
}
 8004390:	bf00      	nop
 8004392:	37e0      	adds	r7, #224	; 0xe0
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40023800 	.word	0x40023800
 800439c:	40007000 	.word	0x40007000

080043a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	b084      	sub	sp, #16
 80043a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80043a6:	463b      	mov	r3, r7
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	605a      	str	r2, [r3, #4]
 80043ae:	609a      	str	r2, [r3, #8]
 80043b0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 80043b2:	4b21      	ldr	r3, [pc, #132]	; (8004438 <MX_ADC1_Init+0x98>)
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <MX_ADC1_Init+0x9c>)
 80043b6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80043b8:	4b1f      	ldr	r3, [pc, #124]	; (8004438 <MX_ADC1_Init+0x98>)
 80043ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80043be:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80043c0:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <MX_ADC1_Init+0x98>)
 80043c2:	2200      	movs	r2, #0
 80043c4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80043c6:	4b1c      	ldr	r3, [pc, #112]	; (8004438 <MX_ADC1_Init+0x98>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80043cc:	4b1a      	ldr	r3, [pc, #104]	; (8004438 <MX_ADC1_Init+0x98>)
 80043ce:	2201      	movs	r2, #1
 80043d0:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80043d2:	4b19      	ldr	r3, [pc, #100]	; (8004438 <MX_ADC1_Init+0x98>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80043da:	4b17      	ldr	r3, [pc, #92]	; (8004438 <MX_ADC1_Init+0x98>)
 80043dc:	2200      	movs	r2, #0
 80043de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80043e0:	4b15      	ldr	r3, [pc, #84]	; (8004438 <MX_ADC1_Init+0x98>)
 80043e2:	4a17      	ldr	r2, [pc, #92]	; (8004440 <MX_ADC1_Init+0xa0>)
 80043e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80043e6:	4b14      	ldr	r3, [pc, #80]	; (8004438 <MX_ADC1_Init+0x98>)
 80043e8:	2200      	movs	r2, #0
 80043ea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80043ec:	4b12      	ldr	r3, [pc, #72]	; (8004438 <MX_ADC1_Init+0x98>)
 80043ee:	2201      	movs	r2, #1
 80043f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80043f2:	4b11      	ldr	r3, [pc, #68]	; (8004438 <MX_ADC1_Init+0x98>)
 80043f4:	2201      	movs	r2, #1
 80043f6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80043fa:	4b0f      	ldr	r3, [pc, #60]	; (8004438 <MX_ADC1_Init+0x98>)
 80043fc:	2201      	movs	r2, #1
 80043fe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004400:	480d      	ldr	r0, [pc, #52]	; (8004438 <MX_ADC1_Init+0x98>)
 8004402:	f7fc f8f7 	bl	80005f4 <HAL_ADC_Init>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800440c:	f000 fa30 	bl	8004870 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8004410:	230d      	movs	r3, #13
 8004412:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004414:	2301      	movs	r3, #1
 8004416:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004418:	2300      	movs	r3, #0
 800441a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800441c:	463b      	mov	r3, r7
 800441e:	4619      	mov	r1, r3
 8004420:	4805      	ldr	r0, [pc, #20]	; (8004438 <MX_ADC1_Init+0x98>)
 8004422:	f7fc fa23 	bl	800086c <HAL_ADC_ConfigChannel>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d001      	beq.n	8004430 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800442c:	f000 fa20 	bl	8004870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8004430:	bf00      	nop
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	200001a0 	.word	0x200001a0
 800443c:	40012000 	.word	0x40012000
 8004440:	0f000001 	.word	0x0f000001

08004444 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800444a:	463b      	mov	r3, r7
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]
 8004450:	605a      	str	r2, [r3, #4]
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc2.Instance = ADC2;
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <MX_ADC2_Init+0x98>)
 8004458:	4a21      	ldr	r2, [pc, #132]	; (80044e0 <MX_ADC2_Init+0x9c>)
 800445a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800445c:	4b1f      	ldr	r3, [pc, #124]	; (80044dc <MX_ADC2_Init+0x98>)
 800445e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004462:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8004464:	4b1d      	ldr	r3, [pc, #116]	; (80044dc <MX_ADC2_Init+0x98>)
 8004466:	2200      	movs	r2, #0
 8004468:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800446a:	4b1c      	ldr	r3, [pc, #112]	; (80044dc <MX_ADC2_Init+0x98>)
 800446c:	2200      	movs	r2, #0
 800446e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <MX_ADC2_Init+0x98>)
 8004472:	2201      	movs	r2, #1
 8004474:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8004476:	4b19      	ldr	r3, [pc, #100]	; (80044dc <MX_ADC2_Init+0x98>)
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <MX_ADC2_Init+0x98>)
 8004480:	2200      	movs	r2, #0
 8004482:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004484:	4b15      	ldr	r3, [pc, #84]	; (80044dc <MX_ADC2_Init+0x98>)
 8004486:	4a17      	ldr	r2, [pc, #92]	; (80044e4 <MX_ADC2_Init+0xa0>)
 8004488:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800448a:	4b14      	ldr	r3, [pc, #80]	; (80044dc <MX_ADC2_Init+0x98>)
 800448c:	2200      	movs	r2, #0
 800448e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8004490:	4b12      	ldr	r3, [pc, #72]	; (80044dc <MX_ADC2_Init+0x98>)
 8004492:	2201      	movs	r2, #1
 8004494:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8004496:	4b11      	ldr	r3, [pc, #68]	; (80044dc <MX_ADC2_Init+0x98>)
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <MX_ADC2_Init+0x98>)
 80044a0:	2201      	movs	r2, #1
 80044a2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80044a4:	480d      	ldr	r0, [pc, #52]	; (80044dc <MX_ADC2_Init+0x98>)
 80044a6:	f7fc f8a5 	bl	80005f4 <HAL_ADC_Init>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80044b0:	f000 f9de 	bl	8004870 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80044b4:	2303      	movs	r3, #3
 80044b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80044b8:	2301      	movs	r3, #1
 80044ba:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80044bc:	2300      	movs	r3, #0
 80044be:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80044c0:	463b      	mov	r3, r7
 80044c2:	4619      	mov	r1, r3
 80044c4:	4805      	ldr	r0, [pc, #20]	; (80044dc <MX_ADC2_Init+0x98>)
 80044c6:	f7fc f9d1 	bl	800086c <HAL_ADC_ConfigChannel>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80044d0:	f000 f9ce 	bl	8004870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80044d4:	bf00      	nop
 80044d6:	3710      	adds	r7, #16
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}
 80044dc:	200000f4 	.word	0x200000f4
 80044e0:	40012100 	.word	0x40012100
 80044e4:	0f000001 	.word	0x0f000001

080044e8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80044ee:	463b      	mov	r3, r7
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]
 80044f4:	605a      	str	r2, [r3, #4]
 80044f6:	609a      	str	r2, [r3, #8]
 80044f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80044fa:	4b21      	ldr	r3, [pc, #132]	; (8004580 <MX_ADC3_Init+0x98>)
 80044fc:	4a21      	ldr	r2, [pc, #132]	; (8004584 <MX_ADC3_Init+0x9c>)
 80044fe:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8004500:	4b1f      	ldr	r3, [pc, #124]	; (8004580 <MX_ADC3_Init+0x98>)
 8004502:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004506:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8004508:	4b1d      	ldr	r3, [pc, #116]	; (8004580 <MX_ADC3_Init+0x98>)
 800450a:	2200      	movs	r2, #0
 800450c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800450e:	4b1c      	ldr	r3, [pc, #112]	; (8004580 <MX_ADC3_Init+0x98>)
 8004510:	2200      	movs	r2, #0
 8004512:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8004514:	4b1a      	ldr	r3, [pc, #104]	; (8004580 <MX_ADC3_Init+0x98>)
 8004516:	2201      	movs	r2, #1
 8004518:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800451a:	4b19      	ldr	r3, [pc, #100]	; (8004580 <MX_ADC3_Init+0x98>)
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004522:	4b17      	ldr	r3, [pc, #92]	; (8004580 <MX_ADC3_Init+0x98>)
 8004524:	2200      	movs	r2, #0
 8004526:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004528:	4b15      	ldr	r3, [pc, #84]	; (8004580 <MX_ADC3_Init+0x98>)
 800452a:	4a17      	ldr	r2, [pc, #92]	; (8004588 <MX_ADC3_Init+0xa0>)
 800452c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800452e:	4b14      	ldr	r3, [pc, #80]	; (8004580 <MX_ADC3_Init+0x98>)
 8004530:	2200      	movs	r2, #0
 8004532:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8004534:	4b12      	ldr	r3, [pc, #72]	; (8004580 <MX_ADC3_Init+0x98>)
 8004536:	2201      	movs	r2, #1
 8004538:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 800453a:	4b11      	ldr	r3, [pc, #68]	; (8004580 <MX_ADC3_Init+0x98>)
 800453c:	2201      	movs	r2, #1
 800453e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004542:	4b0f      	ldr	r3, [pc, #60]	; (8004580 <MX_ADC3_Init+0x98>)
 8004544:	2201      	movs	r2, #1
 8004546:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8004548:	480d      	ldr	r0, [pc, #52]	; (8004580 <MX_ADC3_Init+0x98>)
 800454a:	f7fc f853 	bl	80005f4 <HAL_ADC_Init>
 800454e:	4603      	mov	r3, r0
 8004550:	2b00      	cmp	r3, #0
 8004552:	d001      	beq.n	8004558 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8004554:	f000 f98c 	bl	8004870 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8004558:	230a      	movs	r3, #10
 800455a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800455c:	2301      	movs	r3, #1
 800455e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8004560:	2300      	movs	r3, #0
 8004562:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8004564:	463b      	mov	r3, r7
 8004566:	4619      	mov	r1, r3
 8004568:	4805      	ldr	r0, [pc, #20]	; (8004580 <MX_ADC3_Init+0x98>)
 800456a:	f7fc f97f 	bl	800086c <HAL_ADC_ConfigChannel>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8004574:	f000 f97c 	bl	8004870 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8004578:	bf00      	nop
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	200101e8 	.word	0x200101e8
 8004584:	40012200 	.word	0x40012200
 8004588:	0f000001 	.word	0x0f000001

0800458c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b08e      	sub	sp, #56	; 0x38
 8004590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8004592:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004596:	2200      	movs	r2, #0
 8004598:	601a      	str	r2, [r3, #0]
 800459a:	605a      	str	r2, [r3, #4]
 800459c:	609a      	str	r2, [r3, #8]
 800459e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80045a0:	f107 031c 	add.w	r3, r7, #28
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]
 80045a8:	605a      	str	r2, [r3, #4]
 80045aa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80045ac:	463b      	mov	r3, r7
 80045ae:	2200      	movs	r2, #0
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	605a      	str	r2, [r3, #4]
 80045b4:	609a      	str	r2, [r3, #8]
 80045b6:	60da      	str	r2, [r3, #12]
 80045b8:	611a      	str	r2, [r3, #16]
 80045ba:	615a      	str	r2, [r3, #20]
 80045bc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80045be:	4b2b      	ldr	r3, [pc, #172]	; (800466c <MX_TIM4_Init+0xe0>)
 80045c0:	4a2b      	ldr	r2, [pc, #172]	; (8004670 <MX_TIM4_Init+0xe4>)
 80045c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2160;
 80045c4:	4b29      	ldr	r3, [pc, #164]	; (800466c <MX_TIM4_Init+0xe0>)
 80045c6:	f44f 6207 	mov.w	r2, #2160	; 0x870
 80045ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045cc:	4b27      	ldr	r3, [pc, #156]	; (800466c <MX_TIM4_Init+0xe0>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 0;
 80045d2:	4b26      	ldr	r3, [pc, #152]	; (800466c <MX_TIM4_Init+0xe0>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80045d8:	4b24      	ldr	r3, [pc, #144]	; (800466c <MX_TIM4_Init+0xe0>)
 80045da:	2200      	movs	r2, #0
 80045dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80045de:	4b23      	ldr	r3, [pc, #140]	; (800466c <MX_TIM4_Init+0xe0>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80045e4:	4821      	ldr	r0, [pc, #132]	; (800466c <MX_TIM4_Init+0xe0>)
 80045e6:	f7fe faf3 	bl	8002bd0 <HAL_TIM_Base_Init>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 80045f0:	f000 f93e 	bl	8004870 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80045f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80045f8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80045fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80045fe:	4619      	mov	r1, r3
 8004600:	481a      	ldr	r0, [pc, #104]	; (800466c <MX_TIM4_Init+0xe0>)
 8004602:	f7fe fd0d 	bl	8003020 <HAL_TIM_ConfigClockSource>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 800460c:	f000 f930 	bl	8004870 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim4) != HAL_OK)
 8004610:	4816      	ldr	r0, [pc, #88]	; (800466c <MX_TIM4_Init+0xe0>)
 8004612:	f7fe fb33 	bl	8002c7c <HAL_TIM_OC_Init>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 800461c:	f000 f928 	bl	8004870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004624:	2300      	movs	r3, #0
 8004626:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004628:	f107 031c 	add.w	r3, r7, #28
 800462c:	4619      	mov	r1, r3
 800462e:	480f      	ldr	r0, [pc, #60]	; (800466c <MX_TIM4_Init+0xe0>)
 8004630:	f7ff f97a 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d001      	beq.n	800463e <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 800463a:	f000 f919 	bl	8004870 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800463e:	2300      	movs	r3, #0
 8004640:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004642:	2300      	movs	r3, #0
 8004644:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004646:	2300      	movs	r3, #0
 8004648:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800464a:	2300      	movs	r3, #0
 800464c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800464e:	463b      	mov	r3, r7
 8004650:	2208      	movs	r2, #8
 8004652:	4619      	mov	r1, r3
 8004654:	4805      	ldr	r0, [pc, #20]	; (800466c <MX_TIM4_Init+0xe0>)
 8004656:	f7fe fc65 	bl	8002f24 <HAL_TIM_OC_ConfigChannel>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d001      	beq.n	8004664 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8004660:	f000 f906 	bl	8004870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8004664:	bf00      	nop
 8004666:	3738      	adds	r7, #56	; 0x38
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	20000034 	.word	0x20000034
 8004670:	40000800 	.word	0x40000800

08004674 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800467a:	1d3b      	adds	r3, r7, #4
 800467c:	2200      	movs	r2, #0
 800467e:	601a      	str	r2, [r3, #0]
 8004680:	605a      	str	r2, [r3, #4]
 8004682:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8004684:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <MX_TIM6_Init+0x64>)
 8004686:	4a15      	ldr	r2, [pc, #84]	; (80046dc <MX_TIM6_Init+0x68>)
 8004688:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800468a:	4b13      	ldr	r3, [pc, #76]	; (80046d8 <MX_TIM6_Init+0x64>)
 800468c:	2200      	movs	r2, #0
 800468e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004690:	4b11      	ldr	r3, [pc, #68]	; (80046d8 <MX_TIM6_Init+0x64>)
 8004692:	2200      	movs	r2, #0
 8004694:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1079;
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <MX_TIM6_Init+0x64>)
 8004698:	f240 4237 	movw	r2, #1079	; 0x437
 800469c:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800469e:	4b0e      	ldr	r3, [pc, #56]	; (80046d8 <MX_TIM6_Init+0x64>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80046a4:	480c      	ldr	r0, [pc, #48]	; (80046d8 <MX_TIM6_Init+0x64>)
 80046a6:	f7fe fa93 	bl	8002bd0 <HAL_TIM_Base_Init>
 80046aa:	4603      	mov	r3, r0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d001      	beq.n	80046b4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80046b0:	f000 f8de 	bl	8004870 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80046b4:	2300      	movs	r3, #0
 80046b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80046b8:	2300      	movs	r3, #0
 80046ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80046bc:	1d3b      	adds	r3, r7, #4
 80046be:	4619      	mov	r1, r3
 80046c0:	4805      	ldr	r0, [pc, #20]	; (80046d8 <MX_TIM6_Init+0x64>)
 80046c2:	f7ff f931 	bl	8003928 <HAL_TIMEx_MasterConfigSynchronization>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d001      	beq.n	80046d0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80046cc:	f000 f8d0 	bl	8004870 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80046d0:	bf00      	nop
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	20020290 	.word	0x20020290
 80046dc:	40001000 	.word	0x40001000

080046e0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80046e4:	4b14      	ldr	r3, [pc, #80]	; (8004738 <MX_USART3_UART_Init+0x58>)
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <MX_USART3_UART_Init+0x5c>)
 80046e8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80046ea:	4b13      	ldr	r3, [pc, #76]	; (8004738 <MX_USART3_UART_Init+0x58>)
 80046ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80046f0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80046f2:	4b11      	ldr	r3, [pc, #68]	; (8004738 <MX_USART3_UART_Init+0x58>)
 80046f4:	2200      	movs	r2, #0
 80046f6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80046f8:	4b0f      	ldr	r3, [pc, #60]	; (8004738 <MX_USART3_UART_Init+0x58>)
 80046fa:	2200      	movs	r2, #0
 80046fc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80046fe:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <MX_USART3_UART_Init+0x58>)
 8004700:	2200      	movs	r2, #0
 8004702:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004704:	4b0c      	ldr	r3, [pc, #48]	; (8004738 <MX_USART3_UART_Init+0x58>)
 8004706:	220c      	movs	r2, #12
 8004708:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <MX_USART3_UART_Init+0x58>)
 800470c:	2200      	movs	r2, #0
 800470e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004710:	4b09      	ldr	r3, [pc, #36]	; (8004738 <MX_USART3_UART_Init+0x58>)
 8004712:	2200      	movs	r2, #0
 8004714:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <MX_USART3_UART_Init+0x58>)
 8004718:	2200      	movs	r2, #0
 800471a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800471c:	4b06      	ldr	r3, [pc, #24]	; (8004738 <MX_USART3_UART_Init+0x58>)
 800471e:	2200      	movs	r2, #0
 8004720:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004722:	4805      	ldr	r0, [pc, #20]	; (8004738 <MX_USART3_UART_Init+0x58>)
 8004724:	f7ff f97a 	bl	8003a1c <HAL_UART_Init>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d001      	beq.n	8004732 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800472e:	f000 f89f 	bl	8004870 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004732:	bf00      	nop
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000074 	.word	0x20000074
 800473c:	40004800 	.word	0x40004800

08004740 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <MX_DMA_Init+0x58>)
 8004748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800474a:	4a13      	ldr	r2, [pc, #76]	; (8004798 <MX_DMA_Init+0x58>)
 800474c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004750:	6313      	str	r3, [r2, #48]	; 0x30
 8004752:	4b11      	ldr	r3, [pc, #68]	; (8004798 <MX_DMA_Init+0x58>)
 8004754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800475a:	607b      	str	r3, [r7, #4]
 800475c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 800475e:	2200      	movs	r2, #0
 8004760:	2100      	movs	r1, #0
 8004762:	203c      	movs	r0, #60	; 0x3c
 8004764:	f7fc fc0d 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8004768:	203c      	movs	r0, #60	; 0x3c
 800476a:	f7fc fc26 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800476e:	2200      	movs	r2, #0
 8004770:	2100      	movs	r1, #0
 8004772:	2039      	movs	r0, #57	; 0x39
 8004774:	f7fc fc05 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004778:	2039      	movs	r0, #57	; 0x39
 800477a:	f7fc fc1e 	bl	8000fba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800477e:	2200      	movs	r2, #0
 8004780:	2100      	movs	r1, #0
 8004782:	203a      	movs	r0, #58	; 0x3a
 8004784:	f7fc fbfd 	bl	8000f82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004788:	203a      	movs	r0, #58	; 0x3a
 800478a:	f7fc fc16 	bl	8000fba <HAL_NVIC_EnableIRQ>

}
 800478e:	bf00      	nop
 8004790:	3708      	adds	r7, #8
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	40023800 	.word	0x40023800

0800479c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a2:	f107 030c 	add.w	r3, r7, #12
 80047a6:	2200      	movs	r2, #0
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	605a      	str	r2, [r3, #4]
 80047ac:	609a      	str	r2, [r3, #8]
 80047ae:	60da      	str	r2, [r3, #12]
 80047b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80047b2:	4b1d      	ldr	r3, [pc, #116]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	4a1c      	ldr	r2, [pc, #112]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047b8:	f043 0304 	orr.w	r3, r3, #4
 80047bc:	6313      	str	r3, [r2, #48]	; 0x30
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c2:	f003 0304 	and.w	r3, r3, #4
 80047c6:	60bb      	str	r3, [r7, #8]
 80047c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80047ca:	4b17      	ldr	r3, [pc, #92]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ce:	4a16      	ldr	r2, [pc, #88]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047d0:	f043 0301 	orr.w	r3, r3, #1
 80047d4:	6313      	str	r3, [r2, #48]	; 0x30
 80047d6:	4b14      	ldr	r3, [pc, #80]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	607b      	str	r3, [r7, #4]
 80047e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80047e2:	4b11      	ldr	r3, [pc, #68]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047e6:	4a10      	ldr	r2, [pc, #64]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047e8:	f043 0302 	orr.w	r3, r3, #2
 80047ec:	6313      	str	r3, [r2, #48]	; 0x30
 80047ee:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <MX_GPIO_Init+0x8c>)
 80047f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	603b      	str	r3, [r7, #0]
 80047f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80047fa:	2200      	movs	r2, #0
 80047fc:	2180      	movs	r1, #128	; 0x80
 80047fe:	480b      	ldr	r0, [pc, #44]	; (800482c <MX_GPIO_Init+0x90>)
 8004800:	f7fd f916 	bl	8001a30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004808:	2301      	movs	r3, #1
 800480a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800480c:	2300      	movs	r3, #0
 800480e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004814:	f107 030c 	add.w	r3, r7, #12
 8004818:	4619      	mov	r1, r3
 800481a:	4804      	ldr	r0, [pc, #16]	; (800482c <MX_GPIO_Init+0x90>)
 800481c:	f7fc ff5e 	bl	80016dc <HAL_GPIO_Init>

}
 8004820:	bf00      	nop
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40023800 	.word	0x40023800
 800482c:	40020400 	.word	0x40020400

08004830 <HAL_ADC_ConvHalfCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc1){
 8004830:	b480      	push	{r7}
 8004832:	b083      	sub	sp, #12
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
	HF = true;
 8004838:	4b04      	ldr	r3, [pc, #16]	; (800484c <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 800483a:	2201      	movs	r2, #1
 800483c:	601a      	str	r2, [r3, #0]
 }
 800483e:	bf00      	nop
 8004840:	370c      	adds	r7, #12
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	20000028 	.word	0x20000028

08004850 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc1){
 8004850:	b480      	push	{r7}
 8004852:	b083      	sub	sp, #12
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	TC = true;
 8004858:	4b04      	ldr	r3, [pc, #16]	; (800486c <HAL_ADC_ConvCpltCallback+0x1c>)
 800485a:	2201      	movs	r2, #1
 800485c:	601a      	str	r2, [r3, #0]

 }
 800485e:	bf00      	nop
 8004860:	370c      	adds	r7, #12
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	2000002c 	.word	0x2000002c

08004870 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004874:	bf00      	nop
 8004876:	46bd      	mov	sp, r7
 8004878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487c:	4770      	bx	lr
	...

08004880 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004880:	b480      	push	{r7}
 8004882:	b083      	sub	sp, #12
 8004884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004886:	4b0f      	ldr	r3, [pc, #60]	; (80048c4 <HAL_MspInit+0x44>)
 8004888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800488a:	4a0e      	ldr	r2, [pc, #56]	; (80048c4 <HAL_MspInit+0x44>)
 800488c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004890:	6413      	str	r3, [r2, #64]	; 0x40
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <HAL_MspInit+0x44>)
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800489a:	607b      	str	r3, [r7, #4]
 800489c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800489e:	4b09      	ldr	r3, [pc, #36]	; (80048c4 <HAL_MspInit+0x44>)
 80048a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a2:	4a08      	ldr	r2, [pc, #32]	; (80048c4 <HAL_MspInit+0x44>)
 80048a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048a8:	6453      	str	r3, [r2, #68]	; 0x44
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_MspInit+0x44>)
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b2:	603b      	str	r3, [r7, #0]
 80048b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80048b6:	bf00      	nop
 80048b8:	370c      	adds	r7, #12
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40023800 	.word	0x40023800

080048c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b08e      	sub	sp, #56	; 0x38
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d4:	2200      	movs	r2, #0
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	605a      	str	r2, [r3, #4]
 80048da:	609a      	str	r2, [r3, #8]
 80048dc:	60da      	str	r2, [r3, #12]
 80048de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a88      	ldr	r2, [pc, #544]	; (8004b08 <HAL_ADC_MspInit+0x240>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d154      	bne.n	8004994 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80048ea:	4b88      	ldr	r3, [pc, #544]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80048ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ee:	4a87      	ldr	r2, [pc, #540]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80048f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f4:	6453      	str	r3, [r2, #68]	; 0x44
 80048f6:	4b85      	ldr	r3, [pc, #532]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048fe:	623b      	str	r3, [r7, #32]
 8004900:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004902:	4b82      	ldr	r3, [pc, #520]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004906:	4a81      	ldr	r2, [pc, #516]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004908:	f043 0304 	orr.w	r3, r3, #4
 800490c:	6313      	str	r3, [r2, #48]	; 0x30
 800490e:	4b7f      	ldr	r3, [pc, #508]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004912:	f003 0304 	and.w	r3, r3, #4
 8004916:	61fb      	str	r3, [r7, #28]
 8004918:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration    
    PC3     ------> ADC1_IN13 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800491a:	2308      	movs	r3, #8
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800491e:	2303      	movs	r3, #3
 8004920:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004922:	2300      	movs	r3, #0
 8004924:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004926:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800492a:	4619      	mov	r1, r3
 800492c:	4878      	ldr	r0, [pc, #480]	; (8004b10 <HAL_ADC_MspInit+0x248>)
 800492e:	f7fc fed5 	bl	80016dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004932:	4b78      	ldr	r3, [pc, #480]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 8004934:	4a78      	ldr	r2, [pc, #480]	; (8004b18 <HAL_ADC_MspInit+0x250>)
 8004936:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004938:	4b76      	ldr	r3, [pc, #472]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 800493a:	2200      	movs	r2, #0
 800493c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800493e:	4b75      	ldr	r3, [pc, #468]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 8004940:	2200      	movs	r2, #0
 8004942:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004944:	4b73      	ldr	r3, [pc, #460]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 8004946:	2200      	movs	r2, #0
 8004948:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800494a:	4b72      	ldr	r3, [pc, #456]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 800494c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004950:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004952:	4b70      	ldr	r3, [pc, #448]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 8004954:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004958:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800495a:	4b6e      	ldr	r3, [pc, #440]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 800495c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004960:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004962:	4b6c      	ldr	r3, [pc, #432]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 8004964:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004968:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800496a:	4b6a      	ldr	r3, [pc, #424]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 800496c:	2200      	movs	r2, #0
 800496e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004970:	4b68      	ldr	r3, [pc, #416]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 8004972:	2200      	movs	r2, #0
 8004974:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004976:	4867      	ldr	r0, [pc, #412]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 8004978:	f7fc fb3a 	bl	8000ff0 <HAL_DMA_Init>
 800497c:	4603      	mov	r3, r0
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8004982:	f7ff ff75 	bl	8004870 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a62      	ldr	r2, [pc, #392]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 800498a:	639a      	str	r2, [r3, #56]	; 0x38
 800498c:	4a61      	ldr	r2, [pc, #388]	; (8004b14 <HAL_ADC_MspInit+0x24c>)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004992:	e0b4      	b.n	8004afe <HAL_ADC_MspInit+0x236>
  else if(hadc->Instance==ADC2)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a60      	ldr	r2, [pc, #384]	; (8004b1c <HAL_ADC_MspInit+0x254>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d155      	bne.n	8004a4a <HAL_ADC_MspInit+0x182>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800499e:	4b5b      	ldr	r3, [pc, #364]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a5a      	ldr	r2, [pc, #360]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80049a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80049a8:	6453      	str	r3, [r2, #68]	; 0x44
 80049aa:	4b58      	ldr	r3, [pc, #352]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b2:	61bb      	str	r3, [r7, #24]
 80049b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049b6:	4b55      	ldr	r3, [pc, #340]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80049b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ba:	4a54      	ldr	r2, [pc, #336]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80049bc:	f043 0301 	orr.w	r3, r3, #1
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
 80049c2:	4b52      	ldr	r3, [pc, #328]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 80049c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80049ce:	2308      	movs	r3, #8
 80049d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049d2:	2303      	movs	r3, #3
 80049d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d6:	2300      	movs	r3, #0
 80049d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80049de:	4619      	mov	r1, r3
 80049e0:	484f      	ldr	r0, [pc, #316]	; (8004b20 <HAL_ADC_MspInit+0x258>)
 80049e2:	f7fc fe7b 	bl	80016dc <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Stream2;
 80049e6:	4b4f      	ldr	r3, [pc, #316]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 80049e8:	4a4f      	ldr	r2, [pc, #316]	; (8004b28 <HAL_ADC_MspInit+0x260>)
 80049ea:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Channel = DMA_CHANNEL_1;
 80049ec:	4b4d      	ldr	r3, [pc, #308]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 80049ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80049f2:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80049f4:	4b4b      	ldr	r3, [pc, #300]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 80049f6:	2200      	movs	r2, #0
 80049f8:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80049fa:	4b4a      	ldr	r3, [pc, #296]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 80049fc:	2200      	movs	r2, #0
 80049fe:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8004a00:	4b48      	ldr	r3, [pc, #288]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a06:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004a08:	4b46      	ldr	r3, [pc, #280]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a0e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004a10:	4b44      	ldr	r3, [pc, #272]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004a16:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8004a18:	4b42      	ldr	r3, [pc, #264]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a1e:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8004a20:	4b40      	ldr	r3, [pc, #256]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	621a      	str	r2, [r3, #32]
    hdma_adc2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004a26:	4b3f      	ldr	r3, [pc, #252]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8004a2c:	483d      	ldr	r0, [pc, #244]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a2e:	f7fc fadf 	bl	8000ff0 <HAL_DMA_Init>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_ADC_MspInit+0x174>
      Error_Handler();
 8004a38:	f7ff ff1a 	bl	8004870 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc2);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a39      	ldr	r2, [pc, #228]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a40:	639a      	str	r2, [r3, #56]	; 0x38
 8004a42:	4a38      	ldr	r2, [pc, #224]	; (8004b24 <HAL_ADC_MspInit+0x25c>)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004a48:	e059      	b.n	8004afe <HAL_ADC_MspInit+0x236>
  else if(hadc->Instance==ADC3)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a37      	ldr	r2, [pc, #220]	; (8004b2c <HAL_ADC_MspInit+0x264>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d154      	bne.n	8004afe <HAL_ADC_MspInit+0x236>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004a54:	4b2d      	ldr	r3, [pc, #180]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	4a2c      	ldr	r2, [pc, #176]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004a5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004a5e:	6453      	str	r3, [r2, #68]	; 0x44
 8004a60:	4b2a      	ldr	r3, [pc, #168]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004a6c:	4b27      	ldr	r3, [pc, #156]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a70:	4a26      	ldr	r2, [pc, #152]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004a72:	f043 0304 	orr.w	r3, r3, #4
 8004a76:	6313      	str	r3, [r2, #48]	; 0x30
 8004a78:	4b24      	ldr	r3, [pc, #144]	; (8004b0c <HAL_ADC_MspInit+0x244>)
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7c:	f003 0304 	and.w	r3, r3, #4
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a84:	2301      	movs	r3, #1
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a94:	4619      	mov	r1, r3
 8004a96:	481e      	ldr	r0, [pc, #120]	; (8004b10 <HAL_ADC_MspInit+0x248>)
 8004a98:	f7fc fe20 	bl	80016dc <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 8004a9c:	4b24      	ldr	r3, [pc, #144]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004a9e:	4a25      	ldr	r2, [pc, #148]	; (8004b34 <HAL_ADC_MspInit+0x26c>)
 8004aa0:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8004aa2:	4b23      	ldr	r3, [pc, #140]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004aa4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004aa8:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004aaa:	4b21      	ldr	r3, [pc, #132]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004aac:	2200      	movs	r2, #0
 8004aae:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ab0:	4b1f      	ldr	r3, [pc, #124]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ab2:	2200      	movs	r2, #0
 8004ab4:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8004ab6:	4b1e      	ldr	r3, [pc, #120]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ab8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004abc:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004abe:	4b1c      	ldr	r3, [pc, #112]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ac0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004ac4:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004ac6:	4b1a      	ldr	r3, [pc, #104]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ac8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004acc:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8004ace:	4b18      	ldr	r3, [pc, #96]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ad0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004ad4:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8004ad6:	4b16      	ldr	r3, [pc, #88]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ad8:	2200      	movs	r2, #0
 8004ada:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004adc:	4b14      	ldr	r3, [pc, #80]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8004ae2:	4813      	ldr	r0, [pc, #76]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004ae4:	f7fc fa84 	bl	8000ff0 <HAL_DMA_Init>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d001      	beq.n	8004af2 <HAL_ADC_MspInit+0x22a>
      Error_Handler();
 8004aee:	f7ff febf 	bl	8004870 <Error_Handler>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	4a0e      	ldr	r2, [pc, #56]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38
 8004af8:	4a0d      	ldr	r2, [pc, #52]	; (8004b30 <HAL_ADC_MspInit+0x268>)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004afe:	bf00      	nop
 8004b00:	3738      	adds	r7, #56	; 0x38
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40012000 	.word	0x40012000
 8004b0c:	40023800 	.word	0x40023800
 8004b10:	40020800 	.word	0x40020800
 8004b14:	20020230 	.word	0x20020230
 8004b18:	40026410 	.word	0x40026410
 8004b1c:	40012100 	.word	0x40012100
 8004b20:	40020000 	.word	0x40020000
 8004b24:	200202d0 	.word	0x200202d0
 8004b28:	40026440 	.word	0x40026440
 8004b2c:	40012200 	.word	0x40012200
 8004b30:	2000013c 	.word	0x2000013c
 8004b34:	40026428 	.word	0x40026428

08004b38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a16      	ldr	r2, [pc, #88]	; (8004ba0 <HAL_TIM_Base_MspInit+0x68>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d10c      	bne.n	8004b64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004b4a:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8004b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b4e:	4a15      	ldr	r2, [pc, #84]	; (8004ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8004b50:	f043 0304 	orr.w	r3, r3, #4
 8004b54:	6413      	str	r3, [r2, #64]	; 0x40
 8004b56:	4b13      	ldr	r3, [pc, #76]	; (8004ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8004b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	60fb      	str	r3, [r7, #12]
 8004b60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8004b62:	e018      	b.n	8004b96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM6)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a0f      	ldr	r2, [pc, #60]	; (8004ba8 <HAL_TIM_Base_MspInit+0x70>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d113      	bne.n	8004b96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004b6e:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	4a0c      	ldr	r2, [pc, #48]	; (8004ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8004b74:	f043 0310 	orr.w	r3, r3, #16
 8004b78:	6413      	str	r3, [r2, #64]	; 0x40
 8004b7a:	4b0a      	ldr	r3, [pc, #40]	; (8004ba4 <HAL_TIM_Base_MspInit+0x6c>)
 8004b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004b86:	2200      	movs	r2, #0
 8004b88:	2100      	movs	r1, #0
 8004b8a:	2036      	movs	r0, #54	; 0x36
 8004b8c:	f7fc f9f9 	bl	8000f82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004b90:	2036      	movs	r0, #54	; 0x36
 8004b92:	f7fc fa12 	bl	8000fba <HAL_NVIC_EnableIRQ>
}
 8004b96:	bf00      	nop
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40000800 	.word	0x40000800
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	40001000 	.word	0x40001000

08004bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b08a      	sub	sp, #40	; 0x28
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	2200      	movs	r2, #0
 8004bba:	601a      	str	r2, [r3, #0]
 8004bbc:	605a      	str	r2, [r3, #4]
 8004bbe:	609a      	str	r2, [r3, #8]
 8004bc0:	60da      	str	r2, [r3, #12]
 8004bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a17      	ldr	r2, [pc, #92]	; (8004c28 <HAL_UART_MspInit+0x7c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d128      	bne.n	8004c20 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004bce:	4b17      	ldr	r3, [pc, #92]	; (8004c2c <HAL_UART_MspInit+0x80>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	4a16      	ldr	r2, [pc, #88]	; (8004c2c <HAL_UART_MspInit+0x80>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bda:	4b14      	ldr	r3, [pc, #80]	; (8004c2c <HAL_UART_MspInit+0x80>)
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004be2:	613b      	str	r3, [r7, #16]
 8004be4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004be6:	4b11      	ldr	r3, [pc, #68]	; (8004c2c <HAL_UART_MspInit+0x80>)
 8004be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bea:	4a10      	ldr	r2, [pc, #64]	; (8004c2c <HAL_UART_MspInit+0x80>)
 8004bec:	f043 0302 	orr.w	r3, r3, #2
 8004bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf2:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <HAL_UART_MspInit+0x80>)
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	f003 0302 	and.w	r3, r3, #2
 8004bfa:	60fb      	str	r3, [r7, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004bfe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c04:	2302      	movs	r3, #2
 8004c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004c10:	2307      	movs	r3, #7
 8004c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c14:	f107 0314 	add.w	r3, r7, #20
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4805      	ldr	r0, [pc, #20]	; (8004c30 <HAL_UART_MspInit+0x84>)
 8004c1c:	f7fc fd5e 	bl	80016dc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8004c20:	bf00      	nop
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40004800 	.word	0x40004800
 8004c2c:	40023800 	.word	0x40023800
 8004c30:	40020400 	.word	0x40020400

08004c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004c42:	b480      	push	{r7}
 8004c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004c46:	e7fe      	b.n	8004c46 <HardFault_Handler+0x4>

08004c48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004c4c:	e7fe      	b.n	8004c4c <MemManage_Handler+0x4>

08004c4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004c4e:	b480      	push	{r7}
 8004c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004c52:	e7fe      	b.n	8004c52 <BusFault_Handler+0x4>

08004c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004c54:	b480      	push	{r7}
 8004c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004c58:	e7fe      	b.n	8004c58 <UsageFault_Handler+0x4>

08004c5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004c5e:	bf00      	nop
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004c76:	b480      	push	{r7}
 8004c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004c7a:	bf00      	nop
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004c88:	f7fb fc94 	bl	80005b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004c8c:	bf00      	nop
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004c94:	4802      	ldr	r0, [pc, #8]	; (8004ca0 <TIM6_DAC_IRQHandler+0x10>)
 8004c96:	f7fe f826 	bl	8002ce6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004c9a:	bf00      	nop
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20020290 	.word	0x20020290

08004ca4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ca8:	4802      	ldr	r0, [pc, #8]	; (8004cb4 <DMA2_Stream0_IRQHandler+0x10>)
 8004caa:	f7fc faaf 	bl	800120c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004cae:	bf00      	nop
 8004cb0:	bd80      	pop	{r7, pc}
 8004cb2:	bf00      	nop
 8004cb4:	20020230 	.word	0x20020230

08004cb8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8004cbc:	4802      	ldr	r0, [pc, #8]	; (8004cc8 <DMA2_Stream1_IRQHandler+0x10>)
 8004cbe:	f7fc faa5 	bl	800120c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8004cc2:	bf00      	nop
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	2000013c 	.word	0x2000013c

08004ccc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004cd0:	4802      	ldr	r0, [pc, #8]	; (8004cdc <DMA2_Stream2_IRQHandler+0x10>)
 8004cd2:	f7fc fa9b 	bl	800120c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8004cd6:	bf00      	nop
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	200202d0 	.word	0x200202d0

08004ce0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ce4:	4b15      	ldr	r3, [pc, #84]	; (8004d3c <SystemInit+0x5c>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	4a14      	ldr	r2, [pc, #80]	; (8004d3c <SystemInit+0x5c>)
 8004cec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004cf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8004cf4:	4b12      	ldr	r3, [pc, #72]	; (8004d40 <SystemInit+0x60>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4a11      	ldr	r2, [pc, #68]	; (8004d40 <SystemInit+0x60>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004d00:	4b0f      	ldr	r3, [pc, #60]	; (8004d40 <SystemInit+0x60>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8004d06:	4b0e      	ldr	r3, [pc, #56]	; (8004d40 <SystemInit+0x60>)
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	490d      	ldr	r1, [pc, #52]	; (8004d40 <SystemInit+0x60>)
 8004d0c:	4b0d      	ldr	r3, [pc, #52]	; (8004d44 <SystemInit+0x64>)
 8004d0e:	4013      	ands	r3, r2
 8004d10:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8004d12:	4b0b      	ldr	r3, [pc, #44]	; (8004d40 <SystemInit+0x60>)
 8004d14:	4a0c      	ldr	r2, [pc, #48]	; (8004d48 <SystemInit+0x68>)
 8004d16:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8004d18:	4b09      	ldr	r3, [pc, #36]	; (8004d40 <SystemInit+0x60>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a08      	ldr	r2, [pc, #32]	; (8004d40 <SystemInit+0x60>)
 8004d1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d22:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8004d24:	4b06      	ldr	r3, [pc, #24]	; (8004d40 <SystemInit+0x60>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004d2a:	4b04      	ldr	r3, [pc, #16]	; (8004d3c <SystemInit+0x5c>)
 8004d2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d30:	609a      	str	r2, [r3, #8]
#endif
}
 8004d32:	bf00      	nop
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr
 8004d3c:	e000ed00 	.word	0xe000ed00
 8004d40:	40023800 	.word	0x40023800
 8004d44:	fef6ffff 	.word	0xfef6ffff
 8004d48:	24003010 	.word	0x24003010

08004d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004d84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004d50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004d52:	e003      	b.n	8004d5c <LoopCopyDataInit>

08004d54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004d54:	4b0c      	ldr	r3, [pc, #48]	; (8004d88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004d56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004d58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004d5a:	3104      	adds	r1, #4

08004d5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004d5c:	480b      	ldr	r0, [pc, #44]	; (8004d8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004d5e:	4b0c      	ldr	r3, [pc, #48]	; (8004d90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004d60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004d62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004d64:	d3f6      	bcc.n	8004d54 <CopyDataInit>
  ldr  r2, =_sbss
 8004d66:	4a0b      	ldr	r2, [pc, #44]	; (8004d94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004d68:	e002      	b.n	8004d70 <LoopFillZerobss>

08004d6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004d6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004d6c:	f842 3b04 	str.w	r3, [r2], #4

08004d70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004d72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004d74:	d3f9      	bcc.n	8004d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004d76:	f7ff ffb3 	bl	8004ce0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004d7a:	f000 f811 	bl	8004da0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004d7e:	f7ff fa59 	bl	8004234 <main>
  bx  lr    
 8004d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004d84:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8004d88:	08004e40 	.word	0x08004e40
  ldr  r0, =_sdata
 8004d8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004d90:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004d94:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004d98:	20030330 	.word	0x20030330

08004d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004d9c:	e7fe      	b.n	8004d9c <ADC_IRQHandler>
	...

08004da0 <__libc_init_array>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	4e0d      	ldr	r6, [pc, #52]	; (8004dd8 <__libc_init_array+0x38>)
 8004da4:	4c0d      	ldr	r4, [pc, #52]	; (8004ddc <__libc_init_array+0x3c>)
 8004da6:	1ba4      	subs	r4, r4, r6
 8004da8:	10a4      	asrs	r4, r4, #2
 8004daa:	2500      	movs	r5, #0
 8004dac:	42a5      	cmp	r5, r4
 8004dae:	d109      	bne.n	8004dc4 <__libc_init_array+0x24>
 8004db0:	4e0b      	ldr	r6, [pc, #44]	; (8004de0 <__libc_init_array+0x40>)
 8004db2:	4c0c      	ldr	r4, [pc, #48]	; (8004de4 <__libc_init_array+0x44>)
 8004db4:	f000 f820 	bl	8004df8 <_init>
 8004db8:	1ba4      	subs	r4, r4, r6
 8004dba:	10a4      	asrs	r4, r4, #2
 8004dbc:	2500      	movs	r5, #0
 8004dbe:	42a5      	cmp	r5, r4
 8004dc0:	d105      	bne.n	8004dce <__libc_init_array+0x2e>
 8004dc2:	bd70      	pop	{r4, r5, r6, pc}
 8004dc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dc8:	4798      	blx	r3
 8004dca:	3501      	adds	r5, #1
 8004dcc:	e7ee      	b.n	8004dac <__libc_init_array+0xc>
 8004dce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004dd2:	4798      	blx	r3
 8004dd4:	3501      	adds	r5, #1
 8004dd6:	e7f2      	b.n	8004dbe <__libc_init_array+0x1e>
 8004dd8:	08004e38 	.word	0x08004e38
 8004ddc:	08004e38 	.word	0x08004e38
 8004de0:	08004e38 	.word	0x08004e38
 8004de4:	08004e3c 	.word	0x08004e3c

08004de8 <memset>:
 8004de8:	4402      	add	r2, r0
 8004dea:	4603      	mov	r3, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <_init>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	bf00      	nop
 8004dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dfe:	bc08      	pop	{r3}
 8004e00:	469e      	mov	lr, r3
 8004e02:	4770      	bx	lr

08004e04 <_fini>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	bf00      	nop
 8004e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e0a:	bc08      	pop	{r3}
 8004e0c:	469e      	mov	lr, r3
 8004e0e:	4770      	bx	lr
