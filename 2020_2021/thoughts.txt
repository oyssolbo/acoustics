It is necessary to use the fft to get the frequency
components and filter out the unwanted frequencies.
Thereafter, use the ifft to get the signals in the 
discrete time again. The autocorrelation is used
to get the lag between the different signals

However, we need to measure the time difference 
between the signals. This is done by calculating 
the lag for each hydrophone and multiplying the
lag-difference with the sampling time. By doing this
for all of the hydrophones, we get the time difference
between the "pings". Note that it is important to
sample and calculate the data quick enough. Should
therefore write the entire thing in C/C++, rather
than in python. Much data to calculate, and the 
sound travels quick enough that the difference
in fft and ifft is noticable


The lag between the hydrophones need to be determined
by finding the highest value after filtering of the 
signal. We can assume that echoing would have zero
impact on the signal strength




TODO:
    Write the entire thing in C/C++
        Need to implement:
            fft
            ifft
            estimation of lag
            use the lag to calculate the position
    Need to run this in parallell (?)
    May take some precautions to calculate the pos 
        in relative to 


Should we implement the system on a STM32 or a RPI?
Advantages RPI:
    -faster clock-rate. Can go up to 1.2 GHz compared 
        to ~168 MHz. Can be crucial to calculate fft
        and ifft 
    -3 more threads, so it is easier to do things in
        parallell and calculate the fft and ifft

Disadvantages RPI:
    -heat (?)
        RPI3 can generate up to 6.5W
            Assuming everything connected
        STM32 can generate up to 5.6W, but normaly not more than 2.625W 
            Assuming everything connected
            Depending on the input
            Read more: https://www.st.com/resource/en/user_manual/dm00244518-stm32-nucleo144-boards-mb1137-stmicroelectronics.pdf
    -requires a new PCB to adapt to the system, while the PCB is almost
        complete for the STM32




Assuming the hydrophones are 0.5 m appart, and 
    using c = 1480 m/s, the sound travels that distance 
    in 0.5/1480 = 0.0003378 s. That is approximatley
    equal to 56750 clock-cycles for the STM32, and 
    405360 clock-cycles for the RPI. 

    Unsure how fast it is required to implement the fft
    or the ifft, but that depends entirely on the algoritms 
    and the implementation of the SW into the HW


Other:
    makefile for automatic build
    implement the system into the simulator


